{
  "selectedFiles": [],
  "selectedURLs": [],
  "selectedNotes": [],
  "selectedSpecials": [
    [
      "page:1731224253112",
      {
        "icon": "ðŸ“°",
        "name": "Current Page Content from https://google.github.io/styleguide/jsoncstyleguide.xml"
      }
    ]
  ],
  "outputContents": [
    [
      "page:1731224253112",
      "Fetched content from https://google.github.io/styleguide/jsoncstyleguide.xml on 2024-11-10 07:37:33\n\nGoogle JSON Style Guide\n\nRevision 0.9\n\nEach style point has a summary for which additional information is available by toggling the accompanying arrow button that looks this way: â–½. You may toggle all summaries with the big arrow button:\n\nâ–½ Toggle all summaries\nTable of Contents\nGeneral Guidelines\n\t\nComments Double Quotes Flattened data vs Structured Hierarchy\n\n\nProperty Name Guidelines\n\t\nProperty Name Format Key Names in JSON Maps Reserved Property Names Singular vs Plural Property Names Naming Conflicts\n\n\nProperty Value Guidelines\n\t\nProperty Value Format Empty/Null Property Values Enum Values\n\n\nProperty Value Data Types\n\t\nDate Property Values Time Duration Property Values Latitude/Longitude Property Values\n\n\nJSON Structure & Reserved Property Names\n\t\n\n\nTop-Level Reserved Property Names\n\t\napiVersion context id method params data error\n\n\nReserved Property Names in the data object\n\t\ndata.kind data.fields data.etag data.id data.lang data.updated data.deleted data.items\n\n\nReserved Property Names for Paging\n\t\ndata.currentItemCount data.itemsPerPage data.startIndex data.totalItems data.pagingLinkTemplate data.pageIndex data.totalPages\n\n\nReserved Property Names for Links\n\t\ndata.self / data.selfLink data.edit / data.editLink data.next / data.nextLink data.previous / data.previousLink\n\n\nReserved Property Names in the error object\n\t\nerror.code error.message error.errors error.errors[].domain error.errors[].reason error.errors[].message error.errors[].location error.errors[].locationType error.errors[].extendedHelp error.errors[].sendReport\n\n\nProperty Ordering\n\t\nKind Property Items Property Property Ordering Example\n\n\nExamples\n\t\nYouTube JSON API Paging Example\n\n\nAppendix\n\t\nAppendix A: Reserved JavaScript Words\nImportant Note\nDisplay Hidden Details in this Guide\nlink\nâ–½\nThis style guide contains many details that are initially hidden from view. They are marked by the triangle icon, which you see here on your left. Click it now. You should see \"Hooray\" appear below.\n\nHooray! Now you know you can expand points to get more details. Alternatively, there's an \"expand all\" at the top of this document.\n\nIntroduction\n\nThis style guide documents guidelines and recommendations for building JSON APIs at Google. In general, JSON APIs should follow the spec found at JSON.org. This style guide clarifies and standardizes specific cases so that JSON APIs from Google have a standard look and feel. These guidelines are applicable to JSON requests and responses in both RPC-based and REST-based APIs.\n\nDefinitions\n\nFor the purposes of this style guide, we define the following terms:\n\nproperty - a name/value pair inside a JSON object.\nproperty name - the name (or key) portion of the property.\nproperty value - the value portion of the property.\n{\n  // The name/value pair together is a \"property\".\n  \"propertyName\": \"propertyValue\"\n}\n\n\nJavascript's number type encompasses all floating-point numbers, which is a broad designation. In this guide, number will refer to JavaScript's number type, while integer will refer to integers.\n\nGeneral Guidelines\nComments\nlink\nâ–½\nNo comments in JSON objects.\n\nComments should not be included in JSON objects. Some of the examples in this style guide include comments. However this is only to clarify the examples.\n\n{\n  // You may see comments in the examples below,\n  // But don't include comments in your JSON.\n  \"propertyName\": \"propertyValue\"\n}\n\nDouble Quotes\nlink\nâ–½\nUse double quotes.\n\nIf a property requires quotes, double quotes must be used. All property names must be surrounded by double quotes. Property values of type string must be surrounded by double quotes. Other value types (like boolean or number) should not be surrounded by double quotes.\n\nFlattened data vs Structured Hierarchy\nlink\nâ–½\nData should not be arbitrarily grouped for convenience.\n\nData elements should be \"flattened\" in the JSON representation. Data should not be arbitrarily grouped for convenience.\n\nIn some cases, such as a collection of properties that represents a single structure, it may make sense to keep the structured hierarchy. These cases should be carefully considered, and only used if it makes semantic sense. For example, an address could be represented two ways, but the structured way probably makes more sense for developers:\n\nFlattened Address:\n\n{\n  \"company\": \"Google\",\n  \"website\": \"https://www.google.com/\",\n  \"addressLine1\": \"111 8th Ave\",\n  \"addressLine2\": \"4th Floor\",\n  \"state\": \"NY\",\n  \"city\": \"New York\",\n  \"zip\": \"10011\"\n}\n\nStructured Address:\n\n{\n  \"company\": \"Google\",\n  \"website\": \"https://www.google.com/\",\n  \"address\": {\n    \"line1\": \"111 8th Ave\",\n    \"line2\": \"4th Floor\",\n    \"state\": \"NY\",\n    \"city\": \"New York\",\n    \"zip\": \"10011\"\n  }\n}\nProperty Name Guidelines\nProperty Name Format\nlink\nâ–½\nChoose meaningful property names.\n\nProperty names must conform to the following guidelines:\n\nProperty names should be meaningful names with defined semantics.\nProperty names must be camel-cased, ascii strings.\nThe first character must be a letter, an underscore (_) or a dollar sign ($).\nSubsequent characters can be a letter, a digit, an underscore, or a dollar sign.\nReserved JavaScript keywords should be avoided (A list of reserved JavaScript keywords can be found below).\n\nThese guidelines mirror the guidelines for naming JavaScript identifiers. This allows JavaScript clients to access properties using dot notation. (for example, result.thisIsAnInstanceVariable). Here's an example of an object with one property:\n\n{\n  \"thisPropertyIsAnIdentifier\": \"identifier value\"\n}\n\nKey Names in JSON Maps\nlink\nâ–½\nJSON maps can use any Unicode character in key names.\n\nThe property name naming rules do not apply when a JSON object is used as a map. A map (also referred to as an associative array) is a data type with arbitrary key/value pairs that use the keys to access the corresponding values. JSON objects and JSON maps look the same at runtime; this distinction is relevant to the design of the API. The API documentation should indicate when JSON objects are used as maps.\n\nThe keys of a map do not have to obey the naming guidelines for property names. Map keys may contain any Unicode characters. Clients can access these properties using the square bracket notation familiar for maps (for example, result.thumbnails[\"72\"]).\n\n{\n  // The \"address\" property is a sub-object\n  // holding the parts of an address.\n  \"address\": {\n    \"addressLine1\": \"123 Anystreet\",\n    \"city\": \"Anytown\",\n    \"state\": \"XX\",\n    \"zip\": \"00000\"\n  },\n  // The \"thumbnails\" property is a map that maps\n  // a pixel size to the thumbnail url of that size.\n  \"thumbnails\": {\n    \"72\": \"http://url.to.72px.thumbnail\",\n    \"144\": \"http://url.to.144px.thumbnail\"\n  }\n}\n\nReserved Property Names\nlink\nâ–½\nCertain property names are reserved for consistent use across services.\n\nDetails about reserved property names, along with the full list, can be found later on in this guide. Services should avoid using these property names for anything other than their defined semantics.\n\nSingular vs Plural Property Names\nlink\nâ–½\nArray types should have plural property names. All other property names should be singular.\n\nArrays usually contain multiple items, and a plural property name reflects this. An example of this can be seen in the reserved names below. The items property name is plural because it represents an array of item objects. Most of the other fields are singular.\n\nThere may be exceptions to this, especially when referring to numeric property values. For example, in the reserved names, totalItems makes more sense than totalItem. However, technically, this is not violating the style guide, since totalItems can be viewed as totalOfItems, where total is singular (as per the style guide), and OfItems serves to qualify the total. The field name could also be changed to itemCount to look singular.\n\n{\n  // Singular\n  \"author\": \"lisa\",\n  // An array of siblings, plural\n  \"siblings\": [ \"bart\", \"maggie\"],\n  // \"totalItem\" doesn't sound right\n  \"totalItems\": 10,\n  // But maybe \"itemCount\" is better\n  \"itemCount\": 10,\n}\n\nNaming Conflicts\nlink\nâ–½\nAvoid naming conflicts by choosing a new property name or versioning the API.\n\nNew properties may be added to the reserved list in the future. There is no concept of JSON namespacing. If there is a naming conflict, these can usually be resolved by choosing a new property name or by versioning. For example, suppose we start with the following JSON object:\n\n{\n  \"apiVersion\": \"1.0\",\n  \"data\": {\n    \"recipeName\": \"pizza\",\n    \"ingredients\": [\"tomatoes\", \"cheese\", \"sausage\"]\n  }\n}\n\n\nIf in the future we wish to make ingredients a reserved word, we can do one of two things:\n\n1) Choose a different name:\n\n{\n  \"apiVersion\": \"1.0\",\n  \"data\": {\n    \"recipeName\": \"pizza\",\n    \"ingredientsData\": \"Some new property\",\n    \"ingredients\": [\"tomatoes\", \"cheese\", \"sausage\"]\n  }\n}\n\n\n2) Rename the property on a major version boundary:\n\n{\n  \"apiVersion\": \"2.0\",\n  \"data\": {\n    \"recipeName\": \"pizza\",\n    \"ingredients\": \"Some new property\",\n    \"recipeIngredients\": [\"tomatos\", \"cheese\", \"sausage\"]\n  }\n}\n\nProperty Value Guidelines\nProperty Value Format\nlink\nâ–½\nProperty values must be Unicode booleans, numbers, strings, objects, arrays, or null.\n\nThe spec at JSON.org specifies exactly what type of data is allowed in a property value. This includes Unicode booleans, numbers, strings, objects, arrays, and null. JavaScript expressions are not allowed. APIs should support that spec for all values, and should choose the data type most appropriate for a particular property (numbers to represent numbers, etc.).\n\nGood:\n\n{\n  \"canPigsFly\": null,     // null\n  \"areWeThereYet\": false, // boolean\n  \"answerToLife\": 42,     // number\n  \"name\": \"Bart\",         // string\n  \"moreData\": {},         // object\n  \"things\": []            // array\n}\n\n\nBad:\n\n{\n  \"aVariableName\": aVariableName,         // Bad - JavaScript identifier\n  \"functionFoo\": function() { return 1; } // Bad - JavaScript function\n}\n\nEmpty/Null Property Values\nlink\nâ–½\nConsider removing empty or null values.\n\nIf a property is optional or has an empty or null value, consider dropping the property from the JSON, unless there's a strong semantic reason for its existence.\n\n{\n  \"volume\": 10,\n\n  // Even though the \"balance\" property's value is zero, it should be left in,\n  // since \"0\" signifies \"even balance\" (the value could be \"-1\" for left\n  // balance and \"+1\" for right balance.\n  \"balance\": 0,\n\n  // The \"currentlyPlaying\" property can be left out since it is null.\n  // \"currentlyPlaying\": null\n}\n\nEnum Values\nlink\nâ–½\nEnum values should be represented as strings.\n\nAs APIs grow, enum values may be added, removed or changed. Using strings as enum values ensures that downstream clients can gracefully handle changes to enum values.\n\nJava code:\n\npublic enum Color {\n  WHITE,\n  BLACK,\n  RED,\n  YELLOW,\n  BLUE\n}\n\n\nJSON object:\n\n{\n  \"color\": \"WHITE\"\n}\n\nProperty Value Data Types\n\nAs mentioned above, property value types must be booleans, numbers, strings, objects, arrays, or null. However, it is useful define a set of standard data types when dealing with certain values. These data types will always be strings, but they will be formatted in a specific manner so that they can be easily parsed.\n\nDate Property Values\nlink\nâ–½\nDates should be formatted as recommended by RFC 3339.\n\nDates should be strings formatted as recommended by RFC 3339\n\n{\n  \"lastUpdate\": \"2007-11-06T16:34:41.000Z\"\n}\n\nTime Duration Property Values\nlink\nâ–½\nTime durations should be formatted as recommended by ISO 8601.\n\nTime duration values should be strings formatted as recommended by ISO 8601.\n\n{\n  // three years, six months, four days, twelve hours,\n  // thirty minutes, and five seconds\n  \"duration\": \"P3Y6M4DT12H30M5S\"\n}\n\nLatitude/Longitude Property Values\nlink\nâ–½\nLatitudes/Longitudes should be formatted as recommended by ISO 6709.\n\nLatitude/Longitude should be strings formatted as recommended by ISO 6709. Furthermore, they should favor the Â±DD.DDDDÂ±DDD.DDDD degrees format.\n\n{\n  // The latitude/longitude location of the statue of liberty.\n  \"statueOfLiberty\": \"+40.6894-074.0447\"\n}\n\nJSON Structure & Reserved Property Names\n\nIn order to maintain a consistent interface across APIs, JSON objects should follow the structure outlined below. This structure applies to both requests and responses made with JSON. Within this structure, there are certain property names that are reserved for specific uses. These properties are NOT required; in other words, each reserved property may appear zero or one times. But if a service needs these properties, this naming convention is recommend. Here is a schema of the JSON structure, represented in Orderly format (which in turn can be compiled into a JSONSchema). You can few examples of the JSON structure at the end of this guide.\n\nobject {\n  string apiVersion?;\n  string context?;\n  string id?;\n  string method?;\n  object {\n    string id?\n  }* params?;\n  object {\n    string kind?;\n    string fields?;\n    string etag?;\n    string id?;\n    string lang?;\n    string updated?; # date formatted RFC 3339\n    boolean deleted?;\n    integer currentItemCount?;\n    integer itemsPerPage?;\n    integer startIndex?;\n    integer totalItems?;\n    integer pageIndex?;\n    integer totalPages?;\n    string pageLinkTemplate /^https?:/ ?;\n    object {}* next?;\n    string nextLink?;\n    object {}* previous?;\n    string previousLink?;\n    object {}* self?;\n    string selfLink?;\n    object {}* edit?;\n    string editLink?;\n    array [\n      object {}*;\n    ] items?;\n  }* data?;\n  object {\n    integer code?;\n    string message?;\n    array [\n      object {\n        string domain?;\n        string reason?;\n        string message?;\n        string location?;\n        string locationType?;\n        string extendedHelp?;\n        string sendReport?;\n      }*;\n    ] errors?;\n  }* error?;\n}*;\n\n\nThe JSON object has a few top-level properties, followed by either a data object or an error object, but not both. An explanation of each of these properties can be found below.\n\nTop-Level Reserved Property Names\n\nThe top-level of the JSON object may contain the following properties.\n\napiVersion\nlink\nâ–½\nProperty Value Type: string\nParent: -\n\nRepresents the desired version of the service API in a request, and the version of the service API that's served in the response. apiVersion should always be present. This is not related to the version of the data. Versioning of data should be handled through some other mechanism such as etags.\n\nExample:\n\n{ \"apiVersion\": \"2.1\" }\n\ncontext\nlink\nâ–½\nProperty Value Type: string\nParent: -\n\nClient sets this value and server echos data in the response. This is useful in JSON-P and batch situations , where the user can use the context to correlate responses with requests. This property is a top-level property because the context should present regardless of whether the response was successful or an error. context differs from id in that context is specified by the user while id is assigned by the service.\n\nExample:\n\nRequest #1:\n\nhttps://www.google.com/myapi?context=bart\n\n\nRequest #2:\n\nhttps://www.google.com/myapi?context=lisa\n\n\nResponse #1:\n\n{\n  \"context\": \"bart\",\n  \"data\": {\n    \"items\": []\n  }\n}\n\n\nResponse #2:\n\n{\n  \"context\": \"lisa\",\n  \"data\": {\n    \"items\": []\n  }\n}\n\n\nCommon JavaScript handler code to process both responses:\n\nfunction handleResponse(response) {\n  if (response.result.context == \"bart\") {\n    // Update the \"Bart\" section of the page.\n  } else if (response.result.context == \"lisa\") {\n    // Update the \"Lisa\" section of the page.\n  }\n}\n\nid\nlink\nâ–½\nProperty Value Type: string\nParent: -\n\nA server supplied identifier for the response (regardless of whether the response is a success or an error). This is useful for correlating server logs with individual responses received at a client.\n\nExample:\n\n{ \"id\": \"1\" }\n\nmethod\nlink\nâ–½\nProperty Value Type: string\nParent: -\n\nRepresents the operation to perform, or that was performed, on the data. In the case of a JSON request, the method property can be used to indicate which operation to perform on the data. In the case of a JSON response, the method property can indicate the operation performed on the data.\n\nOne example of this is in JSON-RPC requests, where method indicates the operation to perform on the params property:\n\n{\n  \"method\": \"people.get\",\n  \"params\": {\n    \"userId\": \"@me\",\n    \"groupId\": \"@self\"\n  }\n}\n\nparams\nlink\nâ–½\nProperty Value Type: object\nParent: -\n\nThis object serves as a map of input parameters to send to an RPC request. It can be used in conjunction with the method property to execute an RPC function. If an RPC function does not need parameters, this property can be omitted.\n\nExample:\n\n{\n  \"method\": \"people.get\",\n  \"params\": {\n    \"userId\": \"@me\",\n    \"groupId\": \"@self\"\n  }\n}\n\ndata\nlink\nâ–½\nProperty Value Type: object\nParent: -\n\nContainer for all the data from a response. This property itself has many reserved property names, which are described below. Services are free to add their own data to this object. A JSON response should contain either a data object or an error object, but not both. If both data and error are present, the error object takes precedence.\n\nerror\nlink\nâ–½\nProperty Value Type: object\nParent: -\n\nIndicates that an error has occurred, with details about the error. The error format supports either one or more errors returned from the service. A JSON response should contain either a data object or an error object, but not both. If both data and error are present, the error object takes precedence.\n\nExample:\n\n{\n  \"apiVersion\": \"2.0\",\n  \"error\": {\n    \"code\": 404,\n    \"message\": \"File Not Found\",\n    \"errors\": [{\n      \"domain\": \"Calendar\",\n      \"reason\": \"ResourceNotFoundException\",\n      \"message\": \"File Not Found\n    }]\n  }\n}\n\nReserved Property Names in the data object\n\nThe data property of the JSON object may contain the following properties.\n\ndata.kind\nlink\nâ–½\nProperty Value Type: string\nParent: data\n\nThe kind property serves as a guide to what type of information this particular object stores. It can be present at the data level, or at the items level, or in any object where its helpful to distinguish between various types of objects. If the kind object is present, it should be the first property in the object (See the \"Property Ordering\" section below for more details).\n\nExample:\n\n// \"Kind\" indicates an \"album\" in the Picasa API.\n{\"data\": {\"kind\": \"album\"}}\n\ndata.fields\nlink\nâ–½\nProperty Value Type: string\nParent: data\n\nRepresents the fields present in the response when doing a partial GET, or the fields present in a request when doing a partial PATCH. This property should only exist during a partial GET/PATCH, and should not be empty.\n\nExample:\n\n{\n  \"data\": {\n    \"kind\": \"user\",\n    \"fields\": \"author,id\",\n    \"id\": \"bart\",\n    \"author\": \"Bart\"\n  }\n}\n\ndata.etag\nlink\nâ–½\nProperty Value Type: string\nParent: data\n\nRepresents the etag for the response. Details about ETags in the GData APIs can be found here: https://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning\n\nExample:\n\n{\"data\": {\"etag\": \"W/\"C0QBRXcycSp7ImA9WxRVFUk.\"\"}}\n\ndata.id\nlink\nâ–½\nProperty Value Type: string\nParent: data\n\nA globally unique string used to reference the object. The specific details of the id property are left up to the service.\n\nExample:\n\n{\"data\": {\"id\": \"12345\"}}\n\ndata.lang\nlink\nâ–½\nProperty Value Type: string (formatted as specified in BCP 47)\nParent: data (or any child element)\n\nIndicates the language of the rest of the properties in this object. This property mimics HTML's lang property and XML's xml:lang properties. The value should be a language value as defined in BCP 47. If a single JSON object contains data in multiple languages, the service is responsible for developing and documenting an appropriate location for the lang property.\n\nExample:\n\n{\"data\": {\n  \"items\": [\n    { \"lang\": \"en\",\n      \"title\": \"Hello world!\" },\n    { \"lang\": \"fr\",\n      \"title\": \"Bonjour monde!\" }\n  ]}\n}\ndata.updated\nlink\nâ–½\nProperty Value Type: string (formatted as specified in RFC 3339)\nParent: data\n\nIndicates the last date/time (RFC 3339) the item was updated, as defined by the service.\n\nExample:\n\n{\"data\": {\"updated\": \"2007-11-06T16:34:41.000Z\"}}\n\ndata.deleted\nlink\nâ–½\nProperty Value Type: boolean\nParent: data (or any child element)\n\nA marker element, that, when present, indicates the containing entry is deleted. If deleted is present, its value must be true; a value of false can cause confusion and should be avoided.\n\nExample:\n\n{\"data\": {\n  \"items\": [\n    { \"title\": \"A deleted entry\",\n      \"deleted\": true\n    }\n  ]}\n}\n\ndata.items\nlink\nâ–½\nProperty Value Type: array\nParent: data\n\nThe property name items is reserved to represent an array of items (for example, photos in Picasa, videos in YouTube). This construct is intended to provide a standard location for collections related to the current result. For example, the JSON output could be plugged into a generic pagination system that knows to page on the items array. If items exists, it should be the last property in the data object (See the \"Property Ordering\" section below for more details).\n\nExample:\n\n{\n  \"data\": {\n    \"items\": [\n      { /* Object #1 */ },\n      { /* Object #2 */ },\n      ...\n    ]\n  }\n}\n\nReserved Property Names for Paging\n\nThe following properties are located in the data object, and help page through a list of items. Some of the language and concepts are borrowed from the OpenSearch specification.\n\nThe paging properties below allow for various styles of paging, including:\n\nPrevious/Next paging - Allows user's to move forward and backward through a list, one page at a time. The nextLink and previousLink properties (described in the \"Reserved Property Names for Links\" section below) are used for this style of paging.\nIndex-based paging - Allows user's to jump directly to a specific item position within a list of items. For example, to load 10 items starting at item 200, the developer may point the user to a url with the query string ?startIndex=200.\nPage-based paging - Allows user's to jump directly to a specific page within the items. This is similar to index-based paging, but saves the developer the extra step of having to calculate the item index for a new page of items. For example, rather than jump to item number 200, the developer could jump to page 20. The urls during page-based paging could use the query string ?page=1 or ?page=20. The pageIndex and totalPages properties are used for this style of paging.\n\nAn example of how to use these properties to implement paging can be found at the end of this guide.\n\ndata.currentItemCount\nlink\nâ–½\nProperty Value Type: integer\nParent: data\n\nThe number of items in this result set. Should be equivalent to items.length, and is provided as a convenience property. For example, suppose a developer requests a set of search items, and asks for 10 items per page. The total set of that search has 14 total items. The first page of items will have 10 items in it, so both itemsPerPage and currentItemCount will equal \"10\". The next page of items will have the remaining 4 items; itemsPerPage will still be \"10\", but currentItemCount will be \"4\".\n\nExample:\n\n{\n  \"data\": {\n    // \"itemsPerPage\" does not necessarily match \"currentItemCount\"\n    \"itemsPerPage\": 10,\n    \"currentItemCount\": 4\n  }\n}\n\ndata.itemsPerPage\nlink\nâ–½\nProperty Value Type: integer\nParent: data\n\nThe number of items in the result. This is not necessarily the size of the data.items array; if we are viewing the last page of items, the size of data.items may be less than itemsPerPage. However the size of data.items should not exceed itemsPerPage.\n\nExample:\n\n{\n  \"data\": {\n    \"itemsPerPage\": 10\n  }\n}\n\ndata.startIndex\nlink\nâ–½\nProperty Value Type: integer\nParent: data\n\nThe index of the first item in data.items. For consistency, startIndex should be 1-based. For example, the first item in the first set of items should have a startIndex of 1. If the user requests the next set of data, the startIndex may be 10.\n\nExample:\n\n{\n  \"data\": {\n    \"startIndex\": 1\n  }\n}\n\ndata.totalItems\nlink\nâ–½\nProperty Value Type: integer\nParent: data\n\nThe total number of items available in this set. For example, if a user has 100 blog posts, the response may only contain 10 items, but the totalItems would be 100.\n\nExample:\n\n{\n  \"data\": {\n    \"totalItems\": 100\n  }\n}\n\ndata.pagingLinkTemplate\nlink\nâ–½\nProperty Value Type: string\nParent: data\n\nA URI template indicating how users can calculate subsequent paging links. The URI template also has some reserved variable names: {index} representing the item number to load, and {pageIndex}, representing the page number to load.\n\nExample:\n\n{\n  \"data\": {\n    \"pagingLinkTemplate\": \"https://www.google.com/search/hl=en&q=chicago+style+pizza&start={index}&sa=N\"\n  }\n}\n\ndata.pageIndex\nlink\nâ–½\nProperty Value Type: integer\nParent: data\n\nThe index of the current page of items. For consistency, pageIndex should be 1-based. For example, the first page of items has a pageIndex of 1. pageIndex can also be calculated from the item-based paging properties: pageIndex = floor(startIndex / itemsPerPage) + 1.\n\nExample:\n\n{\n  \"data\": {\n    \"pageIndex\": 1\n  }\n}\n\ndata.totalPages\nlink\nâ–½\nProperty Value Type: integer\nParent: data\n\nThe total number of pages in the result set. totalPages can also be calculated from the item-based paging properties above: totalPages = ceiling(totalItems / itemsPerPage).\n\nExample:\n\n{\n  \"data\": {\n    \"totalPages\": 50\n  }\n}\n\nReserved Property Names for Links\n\nThe following properties are located in the data object, and represent references to other resources. There are two forms of link properties: 1) objects, which can contain any sort of reference (such as a JSON-RPC object), and 2) URI strings, which represent URIs to resources (and will always be suffixed with \"Link\").\n\ndata.self / data.selfLink\nlink\nâ–½\nProperty Value Type: object / string\nParent: data\n\nThe self link can be used to retrieve the item's data. For example, in a list of a user's Picasa album, each album object in the items array could contain a selfLink that can be used to retrieve data related to that particular album.\n\nExample:\n\n{\n  \"data\": {\n    \"self\": { },\n    \"selfLink\": \"https://www.google.com/feeds/album/1234\"\n  }\n}\n\ndata.edit / data.editLink\nlink\nâ–½\nProperty Value Type: object / string\nParent: data\n\nThe edit link indicates where a user can send update or delete requests. This is useful for REST-based APIs. This link need only be present if the user can update/delete this item.\n\nExample:\n\n{\n  \"data\": {\n    \"edit\": { },\n    \"editLink\": \"https://www.google.com/feeds/album/1234/edit\"\n  }\n}\n\ndata.next / data.nextLink\nlink\nâ–½\nProperty Value Type: object / string\nParent: data\n\nThe next link indicates how more data can be retrieved. It points to the location to load the next set of data. It can be used in conjunction with the itemsPerPage, startIndex and totalItems properties in order to page through data.\n\nExample:\n\n{\n  \"data\": {\n    \"next\": { },\n    \"nextLink\": \"https://www.google.com/feeds/album/1234/next\"\n  }\n}\n\ndata.previous / data.previousLink\nlink\nâ–½\nProperty Value Type: object / string\nParent: data\n\nThe previous link indicates how more data can be retrieved. It points to the location to load the previous set of data. It can be used in conjunction with the itemsPerPage, startIndex and totalItems properties in order to page through data.\n\nExample:\n\n{\n  \"data\": {\n    \"previous\": { },\n    \"previousLink\": \"https://www.google.com/feeds/album/1234/next\"\n  }\n}\n\nReserved Property Names in the error object\n\nThe error property of the JSON object may contain the following properties.\n\nerror.code\nlink\nâ–½\nProperty Value Type: integer\nParent: error\n\nRepresents the code for this error. This property value will usually represent the HTTP response code. If there are multiple errors, code will be the error code for the first error.\n\nExample:\n\n{\n  \"error\":{\n    \"code\": 404\n  }\n}\n\nerror.message\nlink\nâ–½\nProperty Value Type: string\nParent: error\n\nA human readable message providing more details about the error. If there are multiple errors, message will be the message for the first error.\n\nExample:\n\n{\n  \"error\":{\n    \"message\": \"File Not Found\"\n  }\n}\n\nerror.errors\nlink\nâ–½\nProperty Value Type: array\nParent: error\n\nContainer for any additional information regarding the error. If the service returns multiple errors, each element in the errors array represents a different error.\n\nExample:\n\n{ \"error\": { \"errors\": [] } }\n\nerror.errors[].domain\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nUnique identifier for the service raising this error. This helps distinguish service-specific errors (i.e. error inserting an event in a calendar) from general protocol errors (i.e. file not found).\n\nExample:\n\n{\n  \"error\":{\n    \"errors\": [{\"domain\": \"Calendar\"}]\n  }\n}\n\nerror.errors[].reason\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nUnique identifier for this error. Different from the error.code property in that this is not an http response code.\n\nExample:\n\n{\n  \"error\":{\n    \"errors\": [{\"reason\": \"ResourceNotFoundException\"}]\n  }\n}\n\nerror.errors[].message\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nA human readable message providing more details about the error. If there is only one error, this field will match error.message.\n\nExample:\n\n{\n  \"error\":{\n    \"code\": 404\n    \"message\": \"File Not Found\",\n    \"errors\": [{\"message\": \"File Not Found\"}]\n  }\n}\n\nerror.errors[].location\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nThe location of the error (the interpretation of its value depends on locationType).\n\nExample:\n\n{\n  \"error\":{\n    \"errors\": [{\"location\": \"\"}]\n  }\n}\n\nerror.errors[].locationType\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nIndicates how the location property should be interpreted.\n\nExample:\n\n{\n  \"error\":{\n    \"errors\": [{\"locationType\": \"\"}]\n  }\n}\n\nerror.errors[].extendedHelp\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nA URI for a help text that might shed some more light on the error.\n\nExample:\n\n{\n  \"error\":{\n    \"errors\": [{\"extendedHelper\": \"http://url.to.more.details.example.com/\"}]\n  }\n}\n\nerror.errors[].sendReport\nlink\nâ–½\nProperty Value Type: string\nParent: error.errors\n\nA URI for a report form used by the service to collect data about the error condition. This URI should be preloaded with parameters describing the request.\n\nExample:\n\n{\n  \"error\":{\n    \"errors\": [{\"sendReport\": \"https://report.example.com/\"}]\n  }\n}\n\nProperty Ordering\n\nProperties can be in any order within the JSON object. However, in some cases the ordering of properties can help parsers quickly interpret data and lead to better performance. One example is a pull parser in a mobile environment, where performance and memory are critical, and unnecessary parsing should be avoided.\n\nKind Property\nlink\nâ–½\nkind should be the first property\n\nSuppose a parser is responsible for parsing a raw JSON stream into a specific object. The kind property guides the parser to instantiate the appropriate object. Therefore it should be the first property in the JSON object. This only applies when objects have a kind property (usually found in the data and items properties).\n\nItems Property\nlink\nâ–½\nitems should be the last property in the data object\n\nThis allows all of the collection's properties to be read before reading each individual item. In cases where there are a lot of items, this avoids unnecessarily parsing those items when the developer only needs fields from the data.\n\nProperty Ordering Example\nlink\nâ–½\n// The \"kind\" property distinguishes between an \"album\" and a \"photo\".\n// \"Kind\" is always the first property in its parent object.\n// The \"items\" property is the last property in the \"data\" object.\n{\n  \"data\": {\n    \"kind\": \"album\",\n    \"title\": \"My Photo Album\",\n    \"description\": \"An album in the user's account\",\n    \"items\": [\n      {\n        \"kind\": \"photo\",\n        \"title\": \"My First Photo\"\n      }\n    ]\n  }\n}\n\nExamples\nYouTube JSON API\nlink\nâ–½\nHere's an example of the YouTube JSON API's response object. You can learn more about YouTube's JSON API here: https://code.google.com/apis/youtube/2.0/developers_guide_jsonc.html.\n{\n  \"apiVersion\": \"2.0\",\n  \"data\": {\n    \"updated\": \"2010-02-04T19:29:54.001Z\",\n    \"totalItems\": 6741,\n    \"startIndex\": 1,\n    \"itemsPerPage\": 1,\n    \"items\": [\n      {\n        \"id\": \"BGODurRfVv4\",\n        \"uploaded\": \"2009-11-17T20:10:06.000Z\",\n        \"updated\": \"2010-02-04T06:25:57.000Z\",\n        \"uploader\": \"docchat\",\n        \"category\": \"Animals\",\n        \"title\": \"From service dog to SURFice dog\",\n        \"description\": \"Surf dog Ricochets inspirational video ...\",\n        \"tags\": [\n          \"Surf dog\",\n          \"dog surfing\",\n          \"dog\",\n          \"golden retriever\",\n        ],\n        \"thumbnail\": {\n          \"default\": \"https://i.ytimg.com/vi/BGODurRfVv4/default.jpg\",\n          \"hqDefault\": \"https://i.ytimg.com/vi/BGODurRfVv4/hqdefault.jpg\"\n        },\n        \"player\": {\n          \"default\": \"https://www.youtube.com/watch?v=BGODurRfVv4&feature=youtube_gdata\",\n          \"mobile\": \"https://m.youtube.com/details?v=BGODurRfVv4\"\n        },\n        \"content\": {\n          \"1\": \"rtsp://v5.cache6.c.youtube.com/CiILENy73wIaGQn-Vl-0uoNjBBMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\",\n          \"5\": \"https://www.youtube.com/v/BGODurRfVv4?f=videos&app=youtube_gdata\",\n          \"6\": \"rtsp://v7.cache7.c.youtube.com/CiILENy73wIaGQn-Vl-0uoNjBBMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"\n        },\n        \"duration\": 315,\n        \"rating\": 4.96,\n        \"ratingCount\": 2043,\n        \"viewCount\": 1781691,\n        \"favoriteCount\": 3363,\n        \"commentCount\": 1007,\n        \"commentsAllowed\": true\n      }\n    ]\n  }\n}\n\nPaging Example\nlink\nâ–½\nThis example demonstrates how the Google search items could be represented as a JSON object, with special attention to the paging variables.\n\nThis sample is for illustrative purposes only. The API below does not actually exist.\n\nHere's a sample Google search results page:\n\n\n\nHere's a sample JSON representation of this page:\n\n{\n  \"apiVersion\": \"2.1\",\n  \"id\": \"1\",\n  \"data\": {\n    \"query\": \"chicago style pizza\",\n    \"time\": \"0.1\",\n    \"currentItemCount\": 10,\n    \"itemsPerPage\": 10,\n    \"startIndex\": 11,\n    \"totalItems\": 2700000,\n    \"nextLink\": \"https://www.google.com/search?hl=en&q=chicago+style+pizza&start=20&sa=N\"\n    \"previousLink\": \"https://www.google.com/search?hl=en&q=chicago+style+pizza&start=0&sa=N\",\n    \"pagingLinkTemplate\": \"https://www.google.com/search/hl=en&q=chicago+style+pizza&start={index}&sa=N\",\n    \"items\": [\n      {\n        \"title\": \"Pizz'a Chicago Home Page\"\n        // More fields for the search results\n      }\n      // More search results\n    ]\n  }\n}\n\n\nHere's how each of the colored boxes from the screenshot would be represented (the background colors correspond to the colors in the images above):\n\nResults 11 - 20 of about 2,700,000 = startIndex\nResults 11 - 20 of about 2,700,000 = startIndex + currentItemCount - 1\nResults 11 - 20 of about 2,700,000 = totalItems\nSearch results = items (formatted appropriately)\nPrevious/Next = previousLink / nextLink\nNumbered links in \"Gooooooooooogle\" = Derived from \"pageLinkTemplate\". The developer is responsible for calculating the values for {index} and substituting those values into the \"pageLinkTemplate\". The pageLinkTemplate's {index} variable is calculated as follows:\nIndex #1 = 0 * itemsPerPage = 0\nIndex #2 = 2 * itemsPerPage = 10\nIndex #3 = 3 * itemsPerPage = 20\nIndex #N = N * itemsPerPage\nAppendix\nAppendix A: Reserved JavaScript Words\nlink\nâ–½\nA list of reserved JavaScript words that should be avoided in property names.\n\nThe words below are reserved by the JavaScript language and cannot be referred to using dot notation. The list represents best knowledge of keywords at this time; the list may change or vary based on your specific execution environment.\n\nFrom the ECMAScript Language Specification 5th Edition\n\nabstract\nboolean break byte\ncase catch char class const continue\ndebugger default delete do double\nelse enum export extends\nfalse final finally float for function\ngoto\nif implements import in instanceof int interface\nlet long\nnative new null\npackage private protected public\nreturn\nshort static super switch synchronized\nthis throw throws transient true try typeof\nvar volatile void\nwhile with\nyield\n\nExcept as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the Apache 2.0 License.\n\nRevision 0.9\n\nEnd of content from https://google.github.io/styleguide/jsoncstyleguide.xml"
    ]
  ],
  "selectionOrder": [
    "page:1731224253112"
  ]
}