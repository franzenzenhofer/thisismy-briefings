{
  "selectedFiles": [],
  "selectedURLs": [],
  "selectedNotes": [],
  "selectedSpecials": [
    [
      "page:1732202654324",
      {
        "name": "Current Page Content from https://spec.openapis.org/oas/v3.1.0.html",
        "icon": "üì∞"
      }
    ]
  ],
  "outputContents": [
    [
      "page:1732202654324",
      "Fetched content from https://spec.openapis.org/oas/v3.1.0.html on 2024-11-21 15:24:14\n\n‚Üë\n‚Üê\n\nOpenAPI Specification v3.1.0\nVersion 3.1.0\n\n15 February 2021\n\nMore details about this document\nThis version:\nhttps://spec.openapis.org/oas/v3.1.0.html\nLatest published version:\nhttps://spec.openapis.org/oas/latest.html\nLatest editor's draft:\nhttps://github.com/OAI/OpenAPI-Specification/\nEditors:\nDarrel Miller\nJeremy Whitlock\nMarsh Gardiner\nMike Ralphson\nRon Ratovsky\nUri Sarid\nFormer editors:\nJason Harmon\nTony Tam\nParticipate\nGitHub OAI/OpenAPI-Specification\nFile a bug\nCommit history\nPull requests\n\nCopyright ¬© 2021 the Linux Foundation\n\nWhat is the OpenAPI Specification?\nThe OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service.\nStatus of This Document\nThe source-of-truth for this specification is the HTML file referenced above as This version.\ntable of contents\n1.\nOpenAPI Specification\n1.1\nVersion 3.1.0\n2.\nIntroduction\n3.\nDefinitions\n3.1\nOpenAPI Document\n3.2\nPath Templating\n3.3\nMedia Types\n3.4\nHTTP Status Codes\n4.\nSpecification\n4.1\nVersions\n4.2\nFormat\n4.3\nDocument Structure\n4.4\nData Types\n4.5\nRich Text Formatting\n4.6\nRelative References in URIs\n4.7\nRelative References in URLs\n4.8\nSchema\n4.8.1\nOpenAPI Object\n4.8.1.1\nFixed Fields\n4.8.2\nInfo Object\n4.8.2.1\nFixed Fields\n4.8.2.2\nInfo Object Example\n4.8.3\nContact Object\n4.8.3.1\nFixed Fields\n4.8.3.2\nContact Object Example\n4.8.4\nLicense Object\n4.8.4.1\nFixed Fields\n4.8.4.2\nLicense Object Example\n4.8.5\nServer Object\n4.8.5.1\nFixed Fields\n4.8.5.2\nServer Object Example\n4.8.6\nServer Variable Object\n4.8.6.1\nFixed Fields\n4.8.7\nComponents Object\n4.8.7.1\nFixed Fields\n4.8.7.2\nComponents Object Example\n4.8.8\nPaths Object\n4.8.8.1\nPatterned Fields\n4.8.8.2\nPath Templating Matching\n4.8.8.3\nPaths Object Example\n4.8.9\nPath Item Object\n4.8.9.1\nFixed Fields\n4.8.9.2\nPath Item Object Example\n4.8.10\nOperation Object\n4.8.10.1\nFixed Fields\n4.8.10.2\nOperation Object Example\n4.8.11\nExternal Documentation Object\n4.8.11.1\nFixed Fields\n4.8.11.2\nExternal Documentation Object Example\n4.8.12\nParameter Object\n4.8.12.1\nParameter Locations\n4.8.12.2\nFixed Fields\n4.8.12.3\nStyle Values\n4.8.12.4\nStyle Examples\n4.8.12.5\nParameter Object Examples\n4.8.13\nRequest Body Object\n4.8.13.1\nFixed Fields\n4.8.13.2\nRequest Body Examples\n4.8.14\nMedia Type Object\n4.8.14.1\nFixed Fields\n4.8.14.2\nMedia Type Examples\n4.8.14.3\nConsiderations for File Uploads\n4.8.14.4\nSupport for x-www-form-urlencoded Request Bodies\n4.8.14.5\nSpecial Considerations for multipart Content\n4.8.15\nEncoding Object\n4.8.15.1\nFixed Fields\n4.8.15.2\nEncoding Object Example\n4.8.16\nResponses Object\n4.8.16.1\nFixed Fields\n4.8.16.2\nPatterned Fields\n4.8.16.3\nResponses Object Example\n4.8.17\nResponse Object\n4.8.17.1\nFixed Fields\n4.8.17.2\nResponse Object Examples\n4.8.18\nCallback Object\n4.8.18.1\nPatterned Fields\n4.8.18.2\nKey Expression\n4.8.18.3\nCallback Object Examples\n4.8.19\nExample Object\n4.8.19.1\nFixed Fields\n4.8.19.2\nExample Object Examples\n4.8.20\nLink Object\n4.8.20.1\nFixed Fields\n4.8.20.2\nExamples\n4.8.20.3\nOperationRef Examples\n4.8.20.4\nRuntime Expressions\n4.8.20.5\nExamples\n4.8.21\nHeader Object\n4.8.21.1\nHeader Object Example\n4.8.22\nTag Object\n4.8.22.1\nFixed Fields\n4.8.22.2\nTag Object Example\n4.8.23\nReference Object\n4.8.23.1\nFixed Fields\n4.8.23.2\nReference Object Example\n4.8.23.3\nRelative Schema Document Example\n4.8.23.4\nRelative Documents With Embedded Schema Example\n4.8.24\nSchema Object\n4.8.24.1\nProperties\n4.8.24.2\nFixed Fields\n4.8.24.2.1\nComposition and Inheritance (Polymorphism)\n4.8.24.2.2\nXML Modeling\n4.8.24.2.3\nSpecifying Schema Dialects\n4.8.24.3\nSchema Object Examples\n4.8.24.3.1\nPrimitive Sample\n4.8.24.3.2\nSimple Model\n4.8.24.3.3\nModel with Map/Dictionary Properties\n4.8.24.3.4\nModel with Example\n4.8.24.3.5\nModels with Composition\n4.8.24.3.6\nModels with Polymorphism Support\n4.8.25\nDiscriminator Object\n4.8.25.1\nFixed Fields\n4.8.26\nXML Object\n4.8.26.1\nFixed Fields\n4.8.26.2\nXML Object Examples\n4.8.26.2.1\nNo XML Element\n4.8.26.2.2\nXML Name Replacement\n4.8.26.2.3\nXML Attribute, Prefix and Namespace\n4.8.26.2.4\nXML Arrays\n4.8.27\nSecurity Scheme Object\n4.8.27.1\nFixed Fields\n4.8.27.2\nSecurity Scheme Object Example\n4.8.27.2.1\nBasic Authentication Sample\n4.8.27.2.2\nAPI Key Sample\n4.8.27.2.3\nJWT Bearer Sample\n4.8.27.2.4\nImplicit OAuth2 Sample\n4.8.28\nOAuth Flows Object\n4.8.28.1\nFixed Fields\n4.8.29\nOAuth Flow Object\n4.8.29.1\nFixed Fields\n4.8.29.2\nOAuth Flow Object Examples\n4.8.30\nSecurity Requirement Object\n4.8.30.1\nPatterned Fields\n4.8.30.2\nSecurity Requirement Object Examples\n4.8.30.2.1\nNon-OAuth2 Security Requirement\n4.8.30.2.2\nOAuth2 Security Requirement\n4.8.30.2.3\nOptional OAuth2 Security\n4.9\nSpecification Extensions\n4.10\nSecurity Filtering\nA.\nAppendix A: Revision History\nB.\nReferences\nB.1\nNormative references\n1. OpenAPI Specification\n1.1 Version 3.1.0\n\nThe key words ‚ÄúMUST‚Äù, ‚ÄúMUST NOT‚Äù, ‚ÄúREQUIRED‚Äù, ‚ÄúSHALL‚Äù, ‚ÄúSHALL NOT‚Äù, ‚ÄúSHOULD‚Äù, ‚ÄúSHOULD NOT‚Äù, ‚ÄúRECOMMENDED‚Äù, ‚ÄúNOT RECOMMENDED‚Äù, ‚ÄúMAY‚Äù, and ‚ÄúOPTIONAL‚Äù in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.\n\nThis document is licensed under The Apache License, Version 2.0.\n\n2. Introduction\n\nThe OpenAPI Specification (OAS) defines a standard, language-agnostic interface to HTTP APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.\n\nAn OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.\n\n3. Definitions\n3.1 OpenAPI Document\n\nA self-contained or composite resource which defines or describes an API or elements of an API. The OpenAPI document MUST contain at least one paths field, a components field or a webhooks field. An OpenAPI document uses and conforms to the OpenAPI Specification.\n\n3.2 Path Templating\n\nPath templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.\n\nEach template expression in the path MUST correspond to a path parameter that is included in the Path Item itself and/or in each of the Path Item‚Äôs Operations. An exception is if the path item is empty, for example due to ACL constraints, matching path parameters are not required.\n\nThe value for these path parameters MUST NOT contain any unescaped ‚Äúgeneric syntax‚Äù characters described by [RFC3986] Section 3: forward slashes (/), question marks (?), or hashes (#).\n\n3.3 Media Types\n\nMedia type definitions are spread across several resources. The media type definitions SHOULD be in compliance with [RFC6838].\n\nSome examples of possible media type definitions:\n\n  text/plain; charset=utf-8\n  application/json\n  application/vnd.github+json\n  application/vnd.github.v3+json\n  application/vnd.github.v3.raw+json\n  application/vnd.github.v3.text+json\n  application/vnd.github.v3.html+json\n  application/vnd.github.v3.full+json\n  application/vnd.github.v3.diff\n  application/vnd.github.v3.patch\n\n3.4 HTTP Status Codes\n\nThe HTTP Status Codes are used to indicate the status of the executed operation. The available status codes are defined by [RFC7231] Section 6 and registered status codes are listed in the IANA Status Code Registry.\n\n4. Specification\n4.1 Versions\n\nThe OpenAPI Specification is versioned using a major.minor.patch versioning scheme. The major.minor portion of the version string (for example 3.1) SHALL designate the OAS feature set. .patch versions address errors in, or provide clarifications to, this document, not the feature set. Tooling which supports OAS 3.1 SHOULD be compatible with all OAS 3.1.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between 3.1.0 and 3.1.1 for example.\n\nOccasionally, non-backwards compatible changes may be made in minor versions of the OAS where impact is believed to be low relative to the benefit provided.\n\nAn OpenAPI document compatible with OAS 3.*.* contains a required openapi field which designates the version of the OAS that it uses.\n\n4.2 Format\n\nAn OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.\n\nFor example, if a field has an array value, the JSON array representation will be used:\n\n{\n   \"field\": [ 1, 2, 3 ]\n}\n\n\nAll field names in the specification are case sensitive. This includes all fields that are used as keys in a map, except where explicitly noted that keys are case insensitive.\n\nThe schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.\n\nPatterned fields MUST have unique names within the containing object.\n\nIn order to preserve the ability to round-trip between YAML and JSON formats, YAML version 1.2 is RECOMMENDED along with some additional constraints:\n\nTags MUST be limited to those allowed by the JSON Schema ruleset.\nKeys used in YAML maps MUST be limited to a scalar string, as defined by the YAML Failsafe schema ruleset.\n\nNote: While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.\n\n4.3 Document Structure\n\nAn OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the author. In the latter case, Reference Objects and Schema Object $ref keywords are used.\n\nIt is RECOMMENDED that the root OpenAPI document be named: openapi.json or openapi.yaml.\n\n4.4 Data Types\n\nData types in the OAS are based on the types supported by the JSON Schema Specification Draft 2020-12. Note that integer as a type is also supported and is defined as a JSON number without a fraction or exponent part. Models are defined using the Schema Object, which is a superset of JSON Schema Specification Draft 2020-12.\n\nAs defined by the JSON Schema Validation vocabulary, data types can have an optional modifier property: format. OAS defines additional formats to provide fine detail for primitive data types.\n\nThe formats defined by the OAS are:\n\ntype\tformat\tComments\ninteger\tint32\tsigned 32 bits\ninteger\tint64\tsigned 64 bits (a.k.a long)\nnumber\tfloat\t\nnumber\tdouble\t\nstring\tpassword\tA hint to UIs to obscure input.\n4.5 Rich Text Formatting\n\nThroughout the specification description fields are noted as supporting [CommonMark] markdown formatting. Where OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by [CommonMark-0.27]. Tooling MAY choose to ignore some CommonMark features to address security concerns.\n\n4.6 Relative References in URIs\n\nUnless specified otherwise, all properties that are URIs MAY be relative references as defined by [RFC3986] Section 4.2.\n\nRelative references, including those in Reference Objects, PathItem Object $ref fields, Link Object operationRef fields and Example Object externalValue fields, are resolved using the referring document as the Base URI according to [RFC3986] Section 5.2.\n\nIf a URI contains a fragment identifier, then the fragment should be resolved per the fragment resolution mechanism of the referenced document. If the representation of the referenced document is JSON or YAML, then the fragment identifier SHOULD be interpreted as a JSON-Pointer as per [RFC6901].\n\nRelative references in Schema Objects, including any that appear as $id values, use the nearest parent $id as a Base URI, as described by JSON Schema Specification Draft 2020-12. If no parent schema contains an $id, then the Base URI MUST be determined according to [RFC3986] Section 5.1.\n\n4.7 Relative References in URLs\n\nUnless specified otherwise, all properties that are URLs MAY be relative references as defined by [RFC3986] Section 4.2. Unless specified otherwise, relative references are resolved using the URLs defined in the Server Object as a Base URL. Note that these themselves MAY be relative to the referring document.\n\n4.8 Schema\n\nIn the following description, if a field is not explicitly REQUIRED or described with a MUST or SHALL, it can be considered OPTIONAL.\n\n4.8.1 OpenAPI Object\n\nThis is the root object of the OpenAPI document.\n\n4.8.1.1 Fixed Fields\nField Name\tType\tDescription\nopenapi\tstring\tREQUIRED. This string MUST be the version number of the OpenAPI Specification that the OpenAPI document uses. The openapi field SHOULD be used by tooling to interpret the OpenAPI document. This is not related to the API info.version string.\ninfo\tInfo Object\tREQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.\njsonSchemaDialect\tstring\tThe default value for the $schema keyword within Schema Objects contained within this OAS document. This MUST be in the form of a URI.\nservers\t[Server Object]\tAn array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.\npaths\tPaths Object\tThe available paths and operations for the API.\nwebhooks\tMap[string, Path Item Object | Reference Object] ]\tThe incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement. Closely related to the callbacks feature, this section describes requests initiated other than by an API call, for example by an out of band registration. The key name is a unique string to refer to each webhook, while the (optionally referenced) Path Item Object describes a request that may be initiated by the API provider and the expected responses. An example is available.\ncomponents\tComponents Object\tAn element to hold various schemas for the document.\nsecurity\t[Security Requirement Object]\tA declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.\ntags\t[Tag Object]\tA list of tags used by the document with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools‚Äô logic. Each tag name in the list MUST be unique.\nexternalDocs\tExternal Documentation Object\tAdditional external documentation.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.2 Info Object\n\nThe object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.\n\n4.8.2.1 Fixed Fields\nField Name\tType\tDescription\ntitle\tstring\tREQUIRED. The title of the API.\nsummary\tstring\tA short summary of the API.\ndescription\tstring\tA description of the API. [CommonMark] syntax MAY be used for rich text representation.\ntermsOfService\tstring\tA URL to the Terms of Service for the API. This MUST be in the form of a URL.\ncontact\tContact Object\tThe contact information for the exposed API.\nlicense\tLicense Object\tThe license information for the exposed API.\nversion\tstring\tREQUIRED. The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.2.2 Info Object Example\n{\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n\ntitle: Sample Pet Store App\nsummary: A pet store manager.\ndescription: This is a sample server for a pet store.\ntermsOfService: https://example.com/terms/\ncontact:\n  name: API Support\n  url: https://www.example.com/support\n  email: support@example.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nversion: 1.0.1\n\n4.8.3 Contact Object\n\nContact information for the exposed API.\n\n4.8.3.1 Fixed Fields\nField Name\tType\tDescription\nname\tstring\tThe identifying name of the contact person/organization.\nurl\tstring\tThe URL pointing to the contact information. This MUST be in the form of a URL.\nemail\tstring\tThe email address of the contact person/organization. This MUST be in the form of an email address.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.3.2 Contact Object Example\n{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n\nname: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n\n4.8.4 License Object\n\nLicense information for the exposed API.\n\n4.8.4.1 Fixed Fields\nField Name\tType\tDescription\nname\tstring\tREQUIRED. The license name used for the API.\nidentifier\tstring\tAn [SPDX-Licenses] expression for the API. The identifier field is mutually exclusive of the url field.\nurl\tstring\tA URL to the license used for the API. This MUST be in the form of a URL. The url field is mutually exclusive of the identifier field.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.4.2 License Object Example\n{\n  \"name\": \"Apache 2.0\",\n  \"identifier\": \"Apache-2.0\"\n}\n\nname: Apache 2.0\nidentifier: Apache-2.0\n\n4.8.5 Server Object\n\nAn object representing a Server.\n\n4.8.5.1 Fixed Fields\nField Name\tType\tDescription\nurl\tstring\tREQUIRED. A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.\ndescription\tstring\tAn optional string describing the host designated by the URL. [CommonMark] syntax MAY be used for rich text representation.\nvariables\tMap[string, Server Variable Object]\tA map between a variable name and its value. The value is used for substitution in the server‚Äôs URL template.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.5.2 Server Object Example\n\nA single server would be described as:\n\n{\n  \"url\": \"https://development.gigantic-server.com/v1\",\n  \"description\": \"Development server\"\n}\n\nurl: https://development.gigantic-server.com/v1\ndescription: Development server\n\n\nThe following shows how multiple servers can be described, for example, at the OpenAPI Object‚Äôs servers:\n\n{\n  \"servers\": [\n    {\n      \"url\": \"https://development.gigantic-server.com/v1\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"https://staging.gigantic-server.com/v1\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://api.gigantic-server.com/v1\",\n      \"description\": \"Production server\"\n    }\n  ]\n}\n\nservers:\n- url: https://development.gigantic-server.com/v1\n  description: Development server\n- url: https://staging.gigantic-server.com/v1\n  description: Staging server\n- url: https://api.gigantic-server.com/v1\n  description: Production server\n\n\nThe following shows how variables can be used for a server configuration:\n\n{\n  \"servers\": [\n    {\n      \"url\": \"https://{username}.gigantic-server.com:{port}/{basePath}\",\n      \"description\": \"The production API server\",\n      \"variables\": {\n        \"username\": {\n          \"default\": \"demo\",\n          \"description\": \"this value is assigned by the service provider, in this example `gigantic-server.com`\"\n        },\n        \"port\": {\n          \"enum\": [\n            \"8443\",\n            \"443\"\n          ],\n          \"default\": \"8443\"\n        },\n        \"basePath\": {\n          \"default\": \"v2\"\n        }\n      }\n    }\n  ]\n}\n\nservers:\n- url: https://{username}.gigantic-server.com:{port}/{basePath}\n  description: The production API server\n  variables:\n    username:\n      # note! no enum here means it is an open value\n      default: demo\n      description: this value is assigned by the service provider, in this example `gigantic-server.com`\n    port:\n      enum:\n        - '8443'\n        - '443'\n      default: '8443'\n    basePath:\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\n      default: v2\n\n4.8.6 Server Variable Object\n\nAn object representing a Server Variable for server URL template substitution.\n\n4.8.6.1 Fixed Fields\nField Name\tType\tDescription\nenum\t[string]\tAn enumeration of string values to be used if the substitution options are from a limited set. The array MUST NOT be empty.\ndefault\tstring\tREQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object‚Äôs treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value MUST exist in the enum‚Äôs values.\ndescription\tstring\tAn optional description for the server variable. [CommonMark] syntax MAY be used for rich text representation.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.7 Components Object\n\nHolds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.\n\n4.8.7.1 Fixed Fields\nField Name\tType\tDescription\nschemas\tMap[string, Schema Object]\tAn object to hold reusable Schema Objects.\nresponses\tMap[string, Response Object | Reference Object]\tAn object to hold reusable Response Objects.\nparameters\tMap[string, Parameter Object | Reference Object]\tAn object to hold reusable Parameter Objects.\nexamples\tMap[string, Example Object | Reference Object]\tAn object to hold reusable Example Objects.\nrequestBodies\tMap[string, Request Body Object | Reference Object]\tAn object to hold reusable Request Body Objects.\nheaders\tMap[string, Header Object | Reference Object]\tAn object to hold reusable Header Objects.\nsecuritySchemes\tMap[string, Security Scheme Object | Reference Object]\tAn object to hold reusable Security Scheme Objects.\nlinks\tMap[string, Link Object | Reference Object]\tAn object to hold reusable Link Objects.\ncallbacks\tMap[string, Callback Object | Reference Object]\tAn object to hold reusable Callback Objects.\npathItems\tMap[string, Path Item Object | Reference Object]\tAn object to hold reusable Path Item Object.\n\nThis object MAY be extended with Specification Extensions.\n\nAll the fixed fields declared above are objects that MUST use keys that match the regular expression: ^[a-zA-Z0-9\\.\\-_]+$.\n\nField Name Examples:\n\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n\n4.8.7.2 Components Object Example\n\"components\": {\n  \"schemas\": {\n    \"GeneralError\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"code\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Category\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"skipParam\": {\n      \"name\": \"skip\",\n      \"in\": \"query\",\n      \"description\": \"number of items to skip\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    },\n    \"limitParam\": {\n      \"name\": \"limit\",\n      \"in\": \"query\",\n      \"description\": \"max records to return\",\n      \"required\": true,\n      \"schema\" : {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n      }\n    }\n  },\n  \"responses\": {\n    \"NotFound\": {\n      \"description\": \"Entity not found.\"\n    },\n    \"IllegalInput\": {\n      \"description\": \"Illegal input for operation.\"\n    },\n    \"GeneralError\": {\n      \"description\": \"General Error\",\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/GeneralError\"\n          }\n        }\n      }\n    }\n  },\n  \"securitySchemes\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    },\n    \"petstore_auth\": {\n      \"type\": \"oauth2\",\n      \"flows\": {\n        \"implicit\": {\n          \"authorizationUrl\": \"https://example.org/api/oauth/dialog\",\n          \"scopes\": {\n            \"write:pets\": \"modify pets in your account\",\n            \"read:pets\": \"read your pets\"\n          }\n        }\n      }\n    }\n  }\n}\n\ncomponents:\n  schemas:\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  parameters:\n    skipParam:\n      name: skip\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    NotFound:\n      description: Entity not found.\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://example.org/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n\n4.8.8 Paths Object\n\nHolds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the Server Object in order to construct the full URL. The Paths MAY be empty, due to Access Control List (ACL) constraints.\n\n4.8.8.1 Patterned Fields\nField Pattern\tType\tDescription\n/{path}\tPath Item Object\tA relative path to an individual endpoint. The field name MUST begin with a forward slash (/). The path is appended (no relative URL resolution) to the expanded URL from the Server Object‚Äôs url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it‚Äôs up to the tooling to decide which one to use.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.8.2 Path Templating Matching\n\nAssuming the following paths, the concrete definition, /pets/mine, will be matched first if used:\n\n  /pets/{petId}\n  /pets/mine\n\n\nThe following paths are considered identical and invalid:\n\n  /pets/{petId}\n  /pets/{name}\n\n\nThe following may lead to ambiguous resolution:\n\n  /{entity}/me\n  /books/{id}\n\n4.8.8.3 Paths Object Example\n{\n  \"/pets\": {\n    \"get\": {\n      \"description\": \"Returns all pets from the system that the user has access to\",\n      \"responses\": {\n        \"200\": {         \n          \"description\": \"A list of pets.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/pets:\n  get:\n    description: Returns all pets from the system that the user has access to\n    responses:\n      '200':\n        description: A list of pets.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/pet'\n\n4.8.9 Path Item Object\n\nDescribes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.\n\n4.8.9.1 Fixed Fields\nField Name\tType\tDescription\n$ref\tstring\tAllows for a referenced definition of this path item. The referenced structure MUST be in the form of a Path Item Object. In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined. See the rules for resolving Relative References.\nsummary\tstring\tAn optional, string summary, intended to apply to all operations in this path.\ndescription\tstring\tAn optional, string description, intended to apply to all operations in this path. [CommonMark] syntax MAY be used for rich text representation.\nget\tOperation Object\tA definition of a GET operation on this path.\nput\tOperation Object\tA definition of a PUT operation on this path.\npost\tOperation Object\tA definition of a POST operation on this path.\ndelete\tOperation Object\tA definition of a DELETE operation on this path.\noptions\tOperation Object\tA definition of a OPTIONS operation on this path.\nhead\tOperation Object\tA definition of a HEAD operation on this path.\npatch\tOperation Object\tA definition of a PATCH operation on this path.\ntrace\tOperation Object\tA definition of a TRACE operation on this path.\nservers\t[Server Object]\tAn alternative server array to service all operations in this path.\nparameters\t[Parameter Object | Reference Object]\tA list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object‚Äôs components/parameters.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.9.2 Path Item Object Example\n{\n  \"get\": {\n    \"description\": \"Returns pets based on ID\",\n    \"summary\": \"Find pets by ID\",\n    \"operationId\": \"getPetsById\",\n    \"responses\": {\n      \"200\": {\n        \"description\": \"pet response\",\n        \"content\": {\n          \"*/*\": {\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Pet\"\n              }\n            }\n          }\n        }\n      },\n      \"default\": {\n        \"description\": \"error payload\",\n        \"content\": {\n          \"text/html\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet to use\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"style\": \"simple\"\n    }\n  ]\n}\n\nget:\n  description: Returns pets based on ID\n  summary: Find pets by ID\n  operationId: getPetsById\n  responses:\n    '200':\n      description: pet response\n      content:\n        '*/*' :\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Pet'\n    default:\n      description: error payload\n      content:\n        'text/html':\n          schema:\n            $ref: '#/components/schemas/ErrorModel'\nparameters:\n- name: id\n  in: path\n  description: ID of pet to use\n  required: true\n  schema:\n    type: array\n    items:\n      type: string \n  style: simple\n\n4.8.10 Operation Object\n\nDescribes a single API operation on a path.\n\n4.8.10.1 Fixed Fields\nField Name\tType\tDescription\ntags\t[string]\tA list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.\nsummary\tstring\tA short summary of what the operation does.\ndescription\tstring\tA verbose explanation of the operation behavior. [CommonMark] syntax MAY be used for rich text representation.\nexternalDocs\tExternal Documentation Object\tAdditional external documentation for this operation.\noperationId\tstring\tUnique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.\nparameters\t[Parameter Object | Reference Object]\tA list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object‚Äôs components/parameters.\nrequestBody\tRequest Body Object | Reference Object\tThe request body applicable for this operation. The requestBody is fully supported in HTTP methods where the HTTP 1.1 specification [RFC7231] Section 4.3.1 has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague (such as GET, HEAD and DELETE), requestBody is permitted but does not have well-defined semantics and SHOULD be avoided if possible.\nresponses\tResponses Object\tThe list of possible responses as they are returned from executing this operation.\ncallbacks\tMap[string, Callback Object | Reference Object]\tA map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.\ndeprecated\tboolean\tDeclares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false.\nsecurity\t[Security Requirement Object]\tA declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.\nservers\t[Server Object]\tAn alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.10.2 Operation Object Example\n{\n  \"tags\": [\n    \"pet\"\n  ],\n  \"summary\": \"Updates a pet in the store with form data\",\n  \"operationId\": \"updatePetWithForm\",\n  \"parameters\": [\n    {\n      \"name\": \"petId\",\n      \"in\": \"path\",\n      \"description\": \"ID of pet that needs to be updated\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  ],\n  \"requestBody\": {\n    \"content\": {\n      \"application/x-www-form-urlencoded\": {\n        \"schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Updated name of the pet\",\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"description\": \"Updated status of the pet\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"status\"]\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"Pet updated.\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    },\n    \"405\": {\n      \"description\": \"Method Not Allowed\",\n      \"content\": {\n        \"application/json\": {},\n        \"application/xml\": {}\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n\ntags:\n- pet\nsummary: Updates a pet in the store with form data\noperationId: updatePetWithForm\nparameters:\n- name: petId\n  in: path\n  description: ID of pet that needs to be updated\n  required: true\n  schema:\n    type: string\nrequestBody:\n  content:\n    'application/x-www-form-urlencoded':\n      schema:\n       type: object\n       properties:\n          name:\n            description: Updated name of the pet\n            type: string\n          status:\n            description: Updated status of the pet\n            type: string\n       required:\n         - status\nresponses:\n  '200':\n    description: Pet updated.\n    content:\n      'application/json': {}\n      'application/xml': {}\n  '405':\n    description: Method Not Allowed\n    content:\n      'application/json': {}\n      'application/xml': {}\nsecurity:\n- petstore_auth:\n  - write:pets\n  - read:pets\n\n4.8.11 External Documentation Object\n\nAllows referencing an external resource for extended documentation.\n\n4.8.11.1 Fixed Fields\nField Name\tType\tDescription\ndescription\tstring\tA description of the target documentation. [CommonMark] syntax MAY be used for rich text representation.\nurl\tstring\tREQUIRED. The URL for the target documentation. This MUST be in the form of a URL.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.11.2 External Documentation Object Example\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n\ndescription: Find more info here\nurl: https://example.com\n\n4.8.12 Parameter Object\n\nDescribes a single operation parameter.\n\nA unique parameter is defined by a combination of a name and location.\n\n4.8.12.1 Parameter Locations\n\nThere are four possible parameter locations specified by the in field:\n\npath - Used together with Path Templating, where the parameter value is actually part of the operation‚Äôs URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.\nquery - Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.\nheader - Custom headers that are expected as part of the request. Note that [RFC7230] Page 22 states header names are case insensitive.\ncookie - Used to pass a specific cookie value to the API.\n4.8.12.2 Fixed Fields\nField Name\tType\tDescription\nname\tstring\tREQUIRED. The name of the parameter. Parameter names are case sensitive.\nIf in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.\nIf in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\nFor all other cases, the name corresponds to the parameter name used by the in property.\n\nin\tstring\tREQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".\ndescription\tstring\tA brief description of the parameter. This could contain examples of use. [CommonMark] syntax MAY be used for rich text representation.\nrequired\tboolean\tDetermines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\ndeprecated\tboolean\tSpecifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.\nallowEmptyValue\tboolean\tSets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false. If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.\n\nThe rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a schema and style can describe the structure and syntax of the parameter.\n\nField Name\tType\tDescription\nstyle\tstring\tDescribes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.\nexplode\tboolean\tWhen this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.\nallowReserved\tboolean\tDetermines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986] Section 2.2 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false.\nschema\tSchema Object\tThe schema defining the type used for the parameter.\nexample\tAny\tExample of the parameter‚Äôs potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.\nexamples\tMap[ string, Example Object | Reference Object]\tExamples of the parameter‚Äôs potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema.\n\nFor more complex scenarios, the content property can define the media type and schema of the parameter. A parameter MUST contain either a schema property, or a content property, but not both. When example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter.\n\nField Name\tType\tDescription\ncontent\tMap[string, Media Type Object]\tA map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.\n4.8.12.3 Style Values\n\nIn order to support common ways of serializing simple parameters, a set of style values are defined.\n\nstyle\ttype\tin\tComments\nmatrix\tprimitive, array, object\tpath\tPath-style parameters defined by [RFC6570] Section 3.2.7\nlabel\tprimitive, array, object\tpath\tLabel style parameters defined by [RFC6570] Section 3.2.5\nform\tprimitive, array, object\tquery, cookie\tForm style parameters defined by [RFC6570] Section 3.2.8. This option replaces collectionFormat with a csv (when explode is false) or multi (when explode is true) value from OpenAPI 2.0.\nsimple\tarray\tpath, header\tSimple style parameters defined by [RFC6570] Section 3.2.2. This option replaces collectionFormat with a csv value from OpenAPI 2.0.\nspaceDelimited\tarray, object\tquery\tSpace separated array or object values. This option replaces collectionFormat equal to ssv from OpenAPI 2.0.\npipeDelimited\tarray, object\tquery\tPipe separated array or object values. This option replaces collectionFormat equal to pipes from OpenAPI 2.0.\ndeepObject\tobject\tquery\tProvides a simple way of rendering nested objects using form parameters.\n4.8.12.4 Style Examples\n\nAssume a parameter named color has one of the following values:\n\n   string -> \"blue\"\n   array -> [\"blue\",\"black\",\"brown\"]\n   object -> { \"R\": 100, \"G\": 200, \"B\": 150 }\n\n\nThe following table shows examples of rendering differences for each value.\n\nstyle\texplode\tempty\tstring\tarray\tobject\nmatrix\tfalse\t;color\t;color=blue\t;color=blue,black,brown\t;color=R,100,G,200,B,150\nmatrix\ttrue\t;color\t;color=blue\t;color=blue;color=black;color=brown\t;R=100;G=200;B=150\nlabel\tfalse\t.\t.blue\t.blue.black.brown\t.R.100.G.200.B.150\nlabel\ttrue\t.\t.blue\t.blue.black.brown\t.R=100.G=200.B=150\nform\tfalse\tcolor=\tcolor=blue\tcolor=blue,black,brown\tcolor=R,100,G,200,B,150\nform\ttrue\tcolor=\tcolor=blue\tcolor=blue&color=black&color=brown\tR=100&G=200&B=150\nsimple\tfalse\tn/a\tblue\tblue,black,brown\tR,100,G,200,B,150\nsimple\ttrue\tn/a\tblue\tblue,black,brown\tR=100,G=200,B=150\nspaceDelimited\tfalse\tn/a\tn/a\tblue%20black%20brown\tR%20100%20G%20200%20B%20150\npipeDelimited\tfalse\tn/a\tn/a\tblue|black|brown\tR|100|G|200|B|150\ndeepObject\ttrue\tn/a\tn/a\tn/a\tcolor[R]=100&color[G]=200&color[B]=150\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.12.5 Parameter Object Examples\n\nA header parameter with an array of 64 bit integer numbers:\n\n{\n  \"name\": \"token\",\n  \"in\": \"header\",\n  \"description\": \"token to be passed as a header\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    }\n  },\n  \"style\": \"simple\"\n}\n\nname: token\nin: header\ndescription: token to be passed as a header\nrequired: true\nschema:\n  type: array\n  items:\n    type: integer\n    format: int64\nstyle: simple\n\n\nA path parameter of a string value:\n\n{\n  \"name\": \"username\",\n  \"in\": \"path\",\n  \"description\": \"username to fetch\",\n  \"required\": true,\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n\nname: username\nin: path\ndescription: username to fetch\nrequired: true\nschema:\n  type: string\n\n\nAn optional query parameter of a string value, allowing multiple values by repeating the query parameter:\n\n{\n  \"name\": \"id\",\n  \"in\": \"query\",\n  \"description\": \"ID of the object to fetch\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"style\": \"form\",\n  \"explode\": true\n}\n\nname: id\nin: query\ndescription: ID of the object to fetch\nrequired: false\nschema:\n  type: array\n  items:\n    type: string\nstyle: form\nexplode: true\n\n\nA free-form query parameter, allowing undefined parameters of a specific type:\n\n{\n  \"in\": \"query\",\n  \"name\": \"freeForm\",\n  \"schema\": {\n    \"type\": \"object\",\n    \"additionalProperties\": {\n      \"type\": \"integer\"\n    },\n  },\n  \"style\": \"form\"\n}\n\nin: query\nname: freeForm\nschema:\n  type: object\n  additionalProperties:\n    type: integer\nstyle: form\n\n\nA complex parameter using content to define serialization:\n\n{\n  \"in\": \"query\",\n  \"name\": \"coordinates\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"lat\",\n          \"long\"\n        ],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n\nin: query\nname: coordinates\ncontent:\n  application/json:\n    schema:\n      type: object\n      required:\n        - lat\n        - long\n      properties:\n        lat:\n          type: number\n        long:\n          type: number\n\n4.8.13 Request Body Object\n\nDescribes a single request body.\n\n4.8.13.1 Fixed Fields\nField Name\tType\tDescription\ndescription\tstring\tA brief description of the request body. This could contain examples of use. [CommonMark] syntax MAY be used for rich text representation.\ncontent\tMap[string, Media Type Object]\tREQUIRED. The content of the request body. The key is a media type or media type range, see [RFC7231] Appendix D, and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*\nrequired\tboolean\tDetermines if the request body is required in the request. Defaults to false.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.13.2 Request Body Examples\n\nA request body with a referenced model definition.\n\n{\n  \"description\": \"user to add to the system\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User Example\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.json\"\n          }\n        }\n    },\n    \"application/xml\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/User\"\n      },\n      \"examples\": {\n          \"user\" : {\n            \"summary\": \"User example in XML\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.xml\"\n          }\n        }\n    },\n    \"text/plain\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in Plain text\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.txt\"\n        }\n      }\n    },\n    \"*/*\": {\n      \"examples\": {\n        \"user\" : {\n            \"summary\": \"User example in other format\",\n            \"externalValue\": \"https://foo.bar/examples/user-example.whatever\"\n        }\n      }\n    }\n  }\n}\n\ndescription: user to add to the system\ncontent:\n  'application/json':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User Example\n        externalValue: 'https://foo.bar/examples/user-example.json'\n  'application/xml':\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: User example in XML\n        externalValue: 'https://foo.bar/examples/user-example.xml'\n  'text/plain':\n    examples:\n      user:\n        summary: User example in Plain text\n        externalValue: 'https://foo.bar/examples/user-example.txt'\n  '*/*':\n    examples:\n      user:\n        summary: User example in other format\n        externalValue: 'https://foo.bar/examples/user-example.whatever'\n\n\nA body parameter that is an array of string values:\n\n{\n  \"description\": \"user to add to the system\",\n  \"required\": true,\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\ndescription: user to add to the system\nrequired: true\ncontent:\n  text/plain:\n    schema:\n      type: array\n      items:\n        type: string\n\n4.8.14 Media Type Object\n\nEach Media Type Object provides schema and examples for the media type identified by its key.\n\n4.8.14.1 Fixed Fields\nField Name\tType\tDescription\nschema\tSchema Object\tThe schema defining the content of the request, response, or parameter.\nexample\tAny\tExample of the media type. The example object SHOULD be in the correct format as specified by the media type. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.\nexamples\tMap[ string, Example Object | Reference Object]\tExamples of the media type. Each example object SHOULD match the media type and specified schema if present. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.\nencoding\tMap[string, Encoding Object]\tA map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.14.2 Media Type Examples\n{\n  \"application/json\": {\n    \"schema\": {\n         \"$ref\": \"#/components/schemas/Pet\"\n    },\n    \"examples\": {\n      \"cat\" : {\n        \"summary\": \"An example of a cat\",\n        \"value\":\n          {\n            \"name\": \"Fluffy\",\n            \"petType\": \"Cat\",\n            \"color\": \"White\",\n            \"gender\": \"male\",\n            \"breed\": \"Persian\"\n          }\n      },\n      \"dog\": {\n        \"summary\": \"An example of a dog with a cat's name\",\n        \"value\" :  {\n          \"name\": \"Puma\",\n          \"petType\": \"Dog\",\n          \"color\": \"Black\",\n          \"gender\": \"Female\",\n          \"breed\": \"Mixed\"\n        },\n      \"frog\": {\n          \"$ref\": \"#/components/examples/frog-example\"\n        }\n      }\n    }\n  }\n}\n\napplication/json:\n  schema:\n    $ref: \"#/components/schemas/Pet\"\n  examples:\n    cat:\n      summary: An example of a cat\n      value:\n        name: Fluffy\n        petType: Cat\n        color: White\n        gender: male\n        breed: Persian\n    dog:\n      summary: An example of a dog with a cat's name\n      value:\n        name: Puma\n        petType: Dog\n        color: Black\n        gender: Female\n        breed: Mixed\n    frog:\n      $ref: \"#/components/examples/frog-example\"\n\n4.8.14.3 Considerations for File Uploads\n\nIn contrast with the 2.0 specification, file input/output content in OpenAPI is described with the same semantics as any other schema type.\n\nIn contrast with the 3.0 specification, the format keyword has no effect on the content-encoding of the schema. JSON Schema offers a contentEncoding keyword, which may be used to specify the Content-Encoding for the schema. The contentEncoding keyword supports all encodings defined in [RFC4648], including ‚Äúbase64‚Äù and ‚Äúbase64url‚Äù, as well as ‚Äúquoted-printable‚Äù from [RFC2045] Section 6.7. The encoding specified by the contentEncoding keyword is independent of an encoding specified by the Content-Type header in the request or response or metadata of a multipart body ‚Äì when both are present, the encoding specified in the contentEncoding is applied first and then the encoding specified in the Content-Type header.\n\nJSON Schema also offers a contentMediaType keyword. However, when the media type is already specified by the Media Type Object‚Äôs key, or by the contentType field of an Encoding Object, the contentMediaType keyword SHALL be ignored if present.\n\nExamples:\n\nContent transferred in binary (octet-stream) MAY omit schema:\n\n# a PNG image as a binary file:\ncontent:\n    image/png: {}\n\n# an arbitrary binary file:\ncontent:\n    application/octet-stream: {}\n\n\nBinary content transferred with base64 encoding:\n\ncontent:\n    image/png:\n        schema:\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n\n\nNote that the Content-Type remains image/png, describing the semantics of the payload. The JSON Schema type and contentEncoding fields explain that the payload is transferred as text. The JSON Schema contentMediaType is technically redundant, but can be used by JSON Schema tools that may not be aware of the OpenAPI context.\n\nThese examples apply to either input payloads of file uploads or response payloads.\n\nA requestBody for submitting a file in a POST operation may look like the following example:\n\nrequestBody:\n  content:\n    application/octet-stream: {}\n\n\nIn addition, specific media types MAY be specified:\n\n# multiple, specific media types may be specified:\nrequestBody:\n  content:\n    # a binary file of type png or jpeg\n    image/jpeg: {}\n    image/png: {}\n\n\nTo upload multiple files, a multipart media type MUST be used:\n\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        properties:\n          # The property name 'file' will be used for all files.\n          file:\n            type: array\n            items: {}\n\n\nAs seen in the section on multipart/form-data below, the empty schema for items indicates a media type of application/octet-stream.\n\n4.8.14.4 Support for x-www-form-urlencoded Request Bodies\n\nTo submit content using form url encoding via [RFC1866], the following definition may be used:\n\nrequestBody:\n  content:\n    application/x-www-form-urlencoded:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # complex types are stringified to support RFC 1866\n            type: object\n            properties: {}\n\n\nIn this example, the contents in the requestBody MUST be stringified per [RFC1866] when passed to the server. In addition, the address field complex object will be stringified.\n\nWhen passing complex objects in the application/x-www-form-urlencoded content type, the default serialization strategy of such properties is described in the Encoding Object‚Äôs style property as form.\n\n4.8.14.5 Special Considerations for multipart Content\n\nIt is common to use multipart/form-data as a Content-Type when transferring request bodies to operations. In contrast to 2.0, a schema is REQUIRED to define the input parameters to the operation when using multipart content. This supports complex structures as well as supporting mechanisms for multiple file uploads.\n\nIn a multipart/form-data request body, each schema property, or each element of a schema array property, takes a section in the payload with an internal header as defined by [RFC7578]. The serialization strategy for each property of a multipart/form-data request body can be specified in an associated Encoding Object.\n\nWhen passing in multipart types, boundaries MAY be used to separate sections of the content being transferred ‚Äì thus, the following default Content-Types are defined for multipart:\n\nIf the property is a primitive, or an array of primitive values, the default Content-Type is text/plain\nIf the property is complex, or an array of complex values, the default Content-Type is application/json\nIf the property is a type: string with a contentEncoding, the default Content-Type is application/octet-stream\n\nPer the JSON Schema specification, contentMediaType without contentEncoding present is treated as if contentEncoding: identity were present. While useful for embedding text documents such as text/html into JSON strings, it is not useful for a multipart/form-data part, as it just causes the document to be treated as text/plain instead of its actual media type. Use the Encoding Object without contentMediaType if no contentEncoding is required.\n\nExamples:\n\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            type: string\n            format: uuid\n          address:\n            # default Content-Type for objects is `application/json`\n            type: object\n            properties: {}\n          profileImage:\n            # Content-Type for application-level encoded resource is `text/plain`\n            type: string\n            contentMediaType: image/png\n            contentEncoding: base64\n          children:\n            # default Content-Type for arrays is based on the _inner_ type (`text/plain` here)\n            type: array\n            items:\n              type: string\n          addresses:\n            # default Content-Type for arrays is based on the _inner_ type (object shown, so `application/json` in this example)\n            type: array\n            items:\n              type: object\n              $ref: '#/components/schemas/Address'\n\n\nAn encoding attribute is introduced to give you control over the serialization of parts of multipart request bodies. This attribute is only applicable to multipart and application/x-www-form-urlencoded request bodies.\n\n4.8.15 Encoding Object\n\nA single encoding definition applied to a single schema property.\n\n4.8.15.1 Fixed Fields\nField Name\tType\tDescription\ncontentType\tstring\tThe Content-Type for encoding a specific property. Default value depends on the property type: for object - application/json; for array ‚Äì the default is defined based on the inner type; for all other cases the default is application/octet-stream. The value can be a specific media type (e.g. application/json), a wildcard media type (e.g. image/*), or a comma-separated list of the two types.\nheaders\tMap[string, Header Object | Reference Object]\tA map allowing additional information to be provided as headers, for example Content-Disposition. Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart.\nstyle\tstring\tDescribes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\nexplode\tboolean\tWhen this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\nallowReserved\tboolean\tDetermines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986] Section 2.2 :/?#[]@!$&'()*+,;= to be included without percent-encoding. The default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded or multipart/form-data. If a value is explicitly defined, then the value of contentType (implicit or explicit) SHALL be ignored.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.15.2 Encoding Object Example\nrequestBody:\n  content:\n    multipart/form-data:\n      schema:\n        type: object\n        properties:\n          id:\n            # default is text/plain\n            type: string\n            format: uuid\n          address:\n            # default is application/json\n            type: object\n            properties: {}\n          historyMetadata:\n            # need to declare XML format!\n            description: metadata in XML format\n            type: object\n            properties: {}\n          profileImage: {}\n      encoding:\n        historyMetadata:\n          # require XML Content-Type in utf-8 encoding\n          contentType: application/xml; charset=utf-8\n        profileImage:\n          # only accept png/jpeg\n          contentType: image/png, image/jpeg\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n\n4.8.16 Responses Object\n\nA container for the expected responses of an operation. The container maps a HTTP response code to the expected response.\n\nThe documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors.\n\nThe default MAY be used as a default response object for all HTTP codes that are not covered individually by the Responses Object.\n\nThe Responses Object MUST contain at least one response code, and if only one response code is provided it SHOULD be the response for a successful operation call.\n\n4.8.16.1 Fixed Fields\nField Name\tType\tDescription\ndefault\tResponse Object | Reference Object\tThe documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses.\n4.8.16.2 Patterned Fields\nField Pattern\tType\tDescription\nHTTP Status Code\tResponse Object | Reference Object\tAny HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. This field MUST be enclosed in quotation marks (for example, ‚Äú200‚Äù) for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X. For example, 2XX represents all response codes between [200-299]. Only the following range definitions are allowed: 1XX, 2XX, 3XX, 4XX, and 5XX. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.16.3 Responses Object Example\n\nA 200 response for a successful operation and a default response for others (implying an error):\n\n{\n  \"200\": {\n    \"description\": \"a pet to be returned\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/Pet\"\n        }\n      }\n    }\n  },\n  \"default\": {\n    \"description\": \"Unexpected error\",\n    \"content\": {\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        }\n      }\n    }\n  }\n}\n\n'200':\n  description: a pet to be returned\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/Pet'\ndefault:\n  description: Unexpected error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/ErrorModel'\n\n4.8.17 Response Object\n\nDescribes a single response from an API Operation, including design-time, static links to operations based on the response.\n\n4.8.17.1 Fixed Fields\nField Name\tType\tDescription\ndescription\tstring\tREQUIRED. A description of the response. [CommonMark] syntax MAY be used for rich text representation.\nheaders\tMap[string, Header Object | Reference Object]\tMaps a header name to its definition. [RFC7230] Page 22 states header names are case insensitive. If a response header is defined with the name \"Content-Type\", it SHALL be ignored.\ncontent\tMap[string, Media Type Object]\tA map containing descriptions of potential response payloads. The key is a media type or media type range, see [RFC7231] Appendix D, and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*\nlinks\tMap[string, Link Object | Reference Object]\tA map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for Component Objects.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.17.2 Response Object Examples\n\nResponse of an array of a complex type:\n\n{\n  \"description\": \"A complex object array response\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/VeryComplexType\"\n        }\n      }\n    }\n  }\n}\n\ndescription: A complex object array response\ncontent:\n  application/json:\n    schema:\n      type: array\n      items:\n        $ref: '#/components/schemas/VeryComplexType'\n\n\nResponse with a string type:\n\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n\n}\n\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n\n\nPlain text response with headers:\n\n{\n  \"description\": \"A simple string response\",\n  \"content\": {\n    \"text/plain\": {\n      \"schema\": {\n        \"type\": \"string\",\n        \"example\": \"whoa!\"\n      }\n    }\n  },\n  \"headers\": {\n    \"X-Rate-Limit-Limit\": {\n      \"description\": \"The number of allowed requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Remaining\": {\n      \"description\": \"The number of remaining requests in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"X-Rate-Limit-Reset\": {\n      \"description\": \"The number of seconds left in the current period\",\n      \"schema\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n\ndescription: A simple string response\ncontent:\n  text/plain:\n    schema:\n      type: string\n    example: 'whoa!'\nheaders:\n  X-Rate-Limit-Limit:\n    description: The number of allowed requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Remaining:\n    description: The number of remaining requests in the current period\n    schema:\n      type: integer\n  X-Rate-Limit-Reset:\n    description: The number of seconds left in the current period\n    schema:\n      type: integer\n\n\nResponse with no return value:\n\n{\n  \"description\": \"object created\"\n}\n\ndescription: object created\n\n4.8.18 Callback Object\n\nA map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.\n\nTo describe incoming requests from the API provider independent from another API call, use the webhooks field.\n\n4.8.18.1 Patterned Fields\nField Pattern\tType\tDescription\n{expression}\tPath Item Object | Reference Object\tA Path Item Object, or a reference to one, used to define a callback request and expected responses. A complete example is available.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.18.2 Key Expression\n\nThe key that identifies the Path Item Object is a runtime expression that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request. A simple example might be $request.body#/url. However, using a runtime expression the complete HTTP message can be accessed. This includes accessing any part of a body that a JSON Pointer [RFC6901] can reference.\n\nFor example, given the following HTTP request:\n\nPOST /subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning HTTP/1.1\nHost: example.org\nContent-Type: application/json\nContent-Length: 187\n\n{\n  \"failedUrl\" : \"https://clientdomain.com/failed\",\n  \"successUrls\" : [\n    \"https://clientdomain.com/fast\",\n    \"https://clientdomain.com/medium\",\n    \"https://clientdomain.com/slow\"\n  ]\n}\n\n201 Created\nLocation: https://example.org/subscription/1\n\n\nThe following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named eventType and a query parameter named queryUrl.\n\nExpression\tValue\n$url\thttps://example.org/subscribe/myevent?queryUrl=https://clientdomain.com/stillrunning\n$method\tPOST\n$request.path.eventType\tmyevent\n$request.query.queryUrl\thttps://clientdomain.com/stillrunning\n$request.header.content-Type\tapplication/json\n$request.body#/failedUrl\thttps://clientdomain.com/failed\n$request.body#/successUrls/2\thttps://clientdomain.com/medium\n$response.header.Location\thttps://example.org/subscription/1\n4.8.18.3 Callback Object Examples\n\nThe following example uses the user provided queryUrl query string parameter to define the callback URL. This is an example of how to use a callback object to describe a WebHook callback that goes with the subscription operation to enable registering for the WebHook.\n\nmyCallback:\n  '{$request.query.queryUrl}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n\n\nThe following example shows a callback where the server is hard-coded, but the query string parameters are populated from the id and email property in the request body.\n\ntransactionCallback:\n  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':\n    post:\n      requestBody:\n        description: Callback payload\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/SomePayload'\n      responses:\n        '200':\n          description: callback successfully processed\n\n4.8.19 Example Object\n4.8.19.1 Fixed Fields\nField Name\tType\tDescription\nsummary\tstring\tShort description for the example.\ndescription\tstring\tLong description for the example. [CommonMark] syntax MAY be used for rich text representation.\nvalue\tAny\tEmbedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.\nexternalValue\tstring\tA URI that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive. See the rules for resolving Relative References.\n\nThis object MAY be extended with Specification Extensions.\n\nIn all cases, the example value is expected to be compatible with the type schema of its associated value. Tooling implementations MAY choose to validate compatibility automatically, and reject the example value(s) if incompatible.\n\n4.8.19.2 Example Object Examples\n\nIn a request body:\n\nrequestBody:\n  content:\n    'application/json':\n      schema:\n        $ref: '#/components/schemas/Address'\n      examples:\n        foo:\n          summary: A foo example\n          value: {\"foo\": \"bar\"}\n        bar:\n          summary: A bar example\n          value: {\"bar\": \"baz\"}\n    'application/xml':\n      examples:\n        xmlExample:\n          summary: This is an example in XML\n          externalValue: 'https://example.org/examples/address-example.xml'\n    'text/plain':\n      examples:\n        textExample:\n          summary: This is a text example\n          externalValue: 'https://foo.bar/examples/address-example.txt'\n\n\nIn a parameter:\n\nparameters:\n  - name: 'zipCode'\n    in: 'query'\n    schema:\n      type: 'string'\n      format: 'zip-code'\n    examples:\n      zip-example:\n        $ref: '#/components/examples/zip-example'\n\n\nIn a response:\n\nresponses:\n  '200':\n    description: your car appointment has been booked\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/SuccessResponse'\n        examples:\n          confirmation-success:\n            $ref: '#/components/examples/confirmation-success'\n\n4.8.20 Link Object\n\nThe Link object represents a possible design-time link for a response. The presence of a link does not guarantee the caller‚Äôs ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.\n\nUnlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response.\n\nFor computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.\n\n4.8.20.1 Fixed Fields\nField Name\tType\tDescription\noperationRef\tstring\tA relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition. See the rules for resolving Relative References.\noperationId\tstring\tThe name of an existing, resolvable OAS operation, as defined with a unique operationId. This field is mutually exclusive of the operationRef field.\nparameters\tMap[string, Any | {expression}]\tA map representing parameters to pass to an operation as specified with operationId or identified via operationRef. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).\nrequestBody\tAny | {expression}\tA literal value or {expression} to use as a request body when calling the target operation.\ndescription\tstring\tA description of the link. [CommonMark] syntax MAY be used for rich text representation.\nserver\tServer Object\tA server object to be used by the target operation.\n\nThis object MAY be extended with Specification Extensions.\n\nA linked operation MUST be identified using either an operationRef or operationId. In the case of an operationId, it MUST be unique and resolved in the scope of the OAS document. Because of the potential for name clashes, the operationRef syntax is preferred for OpenAPI documents with external references.\n\n4.8.20.2 Examples\n\nComputing a link from a request operation where the $request.path.id is used to pass a request parameter to the linked operation.\n\npaths:\n  /users/{id}:\n    parameters:\n    - name: id\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    get:\n      responses:\n        '200':\n          description: the user being returned\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid: # the unique user id\n                    type: string\n                    format: uuid\n          links:\n            address:\n              # the target link operationId\n              operationId: getUserAddress\n              parameters:\n                # get the `id` field from the request path parameter named `id`\n                userId: $request.path.id\n  # the path item of the linked operation\n  /users/{userid}/address:\n    parameters:\n    - name: userid\n      in: path\n      required: true\n      description: the user identifier, as userId\n      schema:\n        type: string\n    # linked operation\n    get:\n      operationId: getUserAddress\n      responses:\n        '200':\n          description: the user's address\n\n\nWhen a runtime expression fails to evaluate, no parameter value is passed to the target operation.\n\nValues from the response body can be used to drive a linked operation.\n\nlinks:\n  address:\n    operationId: getUserAddressByUUID\n    parameters:\n      # get the `uuid` field from the `uuid` field in the response body\n      userUuid: $response.body#/uuid\n\n\nClients follow all links at their discretion. Neither permissions, nor the capability to make a successful call to that link, is guaranteed solely by the existence of a relationship.\n\n4.8.20.3 OperationRef Examples\n\nAs references to operationId MAY NOT be possible (the operationId is an optional field in an Operation Object), references MAY also be made through a relative operationRef:\n\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: '#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n\n\nor an absolute operationRef:\n\nlinks:\n  UserRepositories:\n    # returns array of '#/components/schemas/repository'\n    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'\n    parameters:\n      username: $response.body#/username\n\n\nNote that in the use of operationRef, the escaped forward-slash is necessary when using JSON references.\n\n4.8.20.4 Runtime Expressions\n\nRuntime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call. This mechanism is used by Link Objects and Callback Objects.\n\nThe runtime expression is defined by the following [ABNF] syntax\n\n      expression = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n      source = ( header-reference / query-reference / path-reference / body-reference )\n      header-reference = \"header.\" token\n      query-reference = \"query.\" name \n      path-reference = \"path.\" name\n      body-reference = \"body\" [\"#\" json-pointer ]\n      json-pointer    = *( \"/\" reference-token )\n      reference-token = *( unescaped / escaped )\n      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF\n         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n      escaped         = \"~\" ( \"0\" / \"1\" )\n        ; representing '~' and '/', respectively\n      name = *( CHAR )\n      token = 1*tchar\n      tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n        \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n\n\nHere, json-pointer is taken from [RFC6901], char from [RFC7159] Section 7 and token from [RFC7230] Section 3.2.6.\n\nThe name identifier is case-sensitive, whereas token is not.\n\nThe table below provides examples of runtime expressions and examples of their use in a value:\n\n4.8.20.5 Examples\nSource Location\texample expression\tnotes\nHTTP Method\t$method\tThe allowable values for the $method will be those for the HTTP operation.\nRequested media type\t$request.header.accept\t\nRequest parameter\t$request.path.id\tRequest parameters MUST be declared in the parameters section of the parent operation or they cannot be evaluated. This includes request headers.\nRequest body property\t$request.body#/user/uuid\tIn operations which accept payloads, references may be made to portions of the requestBody or the entire body.\nRequest URL\t$url\t\nResponse value\t$response.body#/status\tIn operations which return payloads, references may be made to portions of the response body or the entire body.\nResponse header\t$response.header.Server\tSingle header values only are available\n\nRuntime expressions preserve the type of the referenced value. Expressions can be embedded into string values by surrounding the expression with {} curly braces.\n\n4.8.21 Header Object\n\nThe Header Object follows the structure of the Parameter Object with the following changes:\n\nname MUST NOT be specified, it is given in the corresponding headers map.\nin MUST NOT be specified, it is implicitly in header.\nAll traits that are affected by the location MUST be applicable to a location of header (for example, style).\n4.8.21.1 Header Object Example\n\nA simple header of type integer:\n\n{\n  \"description\": \"The number of allowed requests in the current period\",\n  \"schema\": {\n    \"type\": \"integer\"\n  }\n}\n\ndescription: The number of allowed requests in the current period\nschema:\n  type: integer\n\n4.8.22 Tag Object\n\nAdds metadata to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.\n\n4.8.22.1 Fixed Fields\nField Name\tType\tDescription\nname\tstring\tREQUIRED. The name of the tag.\ndescription\tstring\tA description for the tag. [CommonMark] syntax MAY be used for rich text representation.\nexternalDocs\tExternal Documentation Object\tAdditional external documentation for this tag.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.22.2 Tag Object Example\n{\n\t\"name\": \"pet\",\n\t\"description\": \"Pets operations\"\n}\n\nname: pet\ndescription: Pets operations\n\n4.8.23 Reference Object\n\nA simple object to allow referencing other components in the OpenAPI document, internally and externally.\n\nThe $ref string value contains a URI [RFC3986], which identifies the location of the value being referenced.\n\nSee the rules for resolving Relative References.\n\n4.8.23.1 Fixed Fields\nField Name\tType\tDescription\n$ref\tstring\tREQUIRED. The reference identifier. This MUST be in the form of a URI.\nsummary\tstring\tA short summary which by default SHOULD override that of the referenced component. If the referenced object-type does not allow a summary field, then this field has no effect.\ndescription\tstring\tA description which by default SHOULD override that of the referenced component. [CommonMark] syntax MAY be used for rich text representation. If the referenced object-type does not allow a description field, then this field has no effect.\n\nThis object cannot be extended with additional properties and any properties added SHALL be ignored.\n\nNote that this restriction on additional properties is a difference between Reference Objects and Schema Objects that contain a $ref keyword.\n\n4.8.23.2 Reference Object Example\n{\n\t\"$ref\": \"#/components/schemas/Pet\"\n}\n\n$ref: '#/components/schemas/Pet'\n\n4.8.23.3 Relative Schema Document Example\n{\n  \"$ref\": \"Pet.json\"\n}\n\n$ref: Pet.yaml\n\n4.8.23.4 Relative Documents With Embedded Schema Example\n{\n  \"$ref\": \"definitions.json#/Pet\"\n}\n\n$ref: definitions.yaml#/Pet\n\n4.8.24 Schema Object\n\nThe Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12.\n\nFor more information about the properties, see JSON Schema Core and JSON Schema Validation.\n\nUnless stated otherwise, the property definitions follow those of JSON Schema and do not add any additional semantics. Where JSON Schema indicates that behavior is defined by the application (e.g. for annotations), OAS also defers the definition of semantics to the application consuming the OpenAPI document.\n\n4.8.24.1 Properties\n\nThe OpenAPI Schema Object dialect is defined as requiring the OAS base vocabulary, in addition to the vocabularies as specified in the JSON Schema draft 2020-12 general purpose meta-schema.\n\nThe OpenAPI Schema Object dialect for this version of the specification is identified by the URI https://spec.openapis.org/oas/3.1/dialect/base (the ‚ÄúOAS dialect schema id‚Äù).\n\nThe following properties are taken from the JSON Schema specification but their definitions have been extended by the OAS:\n\ndescription - [CommonMark] syntax MAY be used for rich text representation.\nformat - See Data Type Formats for further details. While relying on JSON Schema‚Äôs defined formats, the OAS offers a few additional predefined formats.\n\nIn addition to the JSON Schema properties comprising the OAS dialect, the Schema Object supports keywords from any other vocabularies, or entirely arbitrary properties.\n\nThe OpenAPI Specification‚Äôs base vocabulary is comprised of the following keywords:\n\n4.8.24.2 Fixed Fields\nField Name\tType\tDescription\ndiscriminator\tDiscriminator Object\tAdds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.\nxml\tXML Object\tThis MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.\nexternalDocs\tExternal Documentation Object\tAdditional external documentation for this schema.\nexample\tAny\tA free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.\n\nDeprecated: The example property has been deprecated in favor of the JSON Schema examples keyword. Use of example is discouraged, and later versions of this specification may remove it.\n\nThis object MAY be extended with Specification Extensions, though as noted, additional properties MAY omit the x- prefix within this object.\n\n4.8.24.2.1 Composition and Inheritance (Polymorphism)\n\nThe OpenAPI Specification allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition. allOf takes an array of object definitions that are validated independently but together compose a single object.\n\nWhile composition offers model extensibility, it does not imply a hierarchy between the models. To support polymorphism, the OpenAPI Specification adds the discriminator field. When used, the discriminator will be the name of the property that decides which schema definition validates the structure of the model. As such, the discriminator field MUST be a required field. There are two ways to define the value of a discriminator for an inheriting instance.\n\nUse the schema name.\nOverride the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name. As such, inline schema definitions, which do not have a given id, cannot be used in polymorphism.\n4.8.24.2.2 XML Modeling\n\nThe xml property allows extra definitions when translating the JSON definition to XML. The XML Object contains additional information about the available options.\n\n4.8.24.2.3 Specifying Schema Dialects\n\nIt is important for tooling to be able to determine which dialect or meta-schema any given resource wishes to be processed with: JSON Schema Core, JSON Schema Validation, OpenAPI Schema dialect, or some custom meta-schema.\n\nThe $schema keyword MAY be present in any root Schema Object, and if present MUST be used to determine which dialect should be used when processing the schema. This allows use of Schema Objects which comply with other drafts of JSON Schema than the default Draft 2020-12 support. Tooling MUST support the OAS dialect schema id, and MAY support additional values of $schema.\n\nTo allow use of a different default $schema value for all Schema Objects contained within an OAS document, a jsonSchemaDialect value may be set within the OpenAPI Object. If this default is not set, then the OAS dialect schema id MUST be used for these Schema Objects. The value of $schema within a Schema Object always overrides any default.\n\nWhen a Schema Object is referenced from an external resource which is not an OAS document (e.g. a bare JSON Schema resource), then the value of the $schema keyword for schemas within that resource MUST follow JSON Schema rules.\n\n4.8.24.3 Schema Object Examples\n4.8.24.3.1 Primitive Sample\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n\ntype: string\nformat: email\n\n4.8.24.3.2 Simple Model\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n\n4.8.24.3.3 Model with Map/Dictionary Properties\n\nFor a simple string to string mapping:\n\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n\ntype: object\nadditionalProperties:\n  type: string\n\n\nFor a string to model mapping:\n\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n\n4.8.24.3.4 Model with Example\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"example\": {\n    \"name\": \"Puma\",\n    \"id\": 1\n  }\n}\n\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexample:\n  name: Puma\n  id: 1\n\n4.8.24.3.5 Models with Composition\n{\n  \"components\": {\n    \"schemas\": {\n      \"ErrorModel\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\",\n          \"code\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"code\": {\n            \"type\": \"integer\",\n            \"minimum\": 100,\n            \"maximum\": 600\n          }\n        }\n      },\n      \"ExtendedErrorModel\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/ErrorModel\"\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"rootCause\"\n            ],\n            \"properties\": {\n              \"rootCause\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\ncomponents:\n  schemas:\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n\n4.8.24.3.6 Models with Polymorphism Support\n{\n  \"components\": {\n    \"schemas\": {\n      \"Pet\": {\n        \"type\": \"object\",\n        \"discriminator\": {\n          \"propertyName\": \"petType\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"petType\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"petType\"\n        ]\n      },\n      \"Cat\": {\n        \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"huntingSkill\": {\n                \"type\": \"string\",\n                \"description\": \"The measured skill for hunting\",\n                \"default\": \"lazy\",\n                \"enum\": [\n                  \"clueless\",\n                  \"lazy\",\n                  \"adventurous\",\n                  \"aggressive\"\n                ]\n              }\n            },\n            \"required\": [\n              \"huntingSkill\"\n            ]\n          }\n        ]\n      },\n      \"Dog\": {\n        \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/components/schemas/Pet\"\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"packSize\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\",\n                \"description\": \"the size of the pack the dog is from\",\n                \"default\": 0,\n                \"minimum\": 0\n              }\n            },\n            \"required\": [\n              \"packSize\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      discriminator:\n        propertyName: petType\n      properties:\n        name:\n          type: string\n        petType:\n          type: string\n      required:\n      - name\n      - petType\n    Cat:  ## \"Cat\" will be used as the discriminator value\n      description: A representation of a cat\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            enum:\n            - clueless\n            - lazy\n            - adventurous\n            - aggressive\n        required:\n        - huntingSkill\n    Dog:  ## \"Dog\" will be used as the discriminator value\n      description: A representation of a dog\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: the size of the pack the dog is from\n            default: 0\n            minimum: 0\n        required:\n        - packSize\n\n4.8.25 Discriminator Object\n\nWhen request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation. The discriminator is a specific object in a schema which is used to inform the consumer of the document of an alternative schema based on the value associated with it.\n\nWhen using the discriminator, inline schemas will not be considered.\n\n4.8.25.1 Fixed Fields\nField Name\tType\tDescription\npropertyName\tstring\tREQUIRED. The name of the property in the payload that will hold the discriminator value.\nmapping\tMap[string, string]\tAn object to hold mappings between payload values and schema names or references.\n\nThis object MAY be extended with Specification Extensions.\n\nThe discriminator object is legal only when using one of the composite keywords oneOf, anyOf, allOf.\n\nIn OAS 3.0, a response payload MAY be described to be exactly one of any number of types:\n\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n\n\nwhich means the payload MUST, by validation, match exactly one of the schemas described by Cat, Dog, or Lizard. In this case, a discriminator MAY act as a ‚Äúhint‚Äù to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:\n\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  discriminator:\n    propertyName: petType\n\n\nThe expectation now is that a property with name petType MUST be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document. Thus the response payload:\n\n{\n  \"id\": 12345,\n  \"petType\": \"Cat\"\n}\n\n\nWill indicate that the Cat schema be used in conjunction with this payload.\n\nIn scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional mapping definition MAY be used:\n\nMyResponseType:\n  oneOf:\n  - $ref: '#/components/schemas/Cat'\n  - $ref: '#/components/schemas/Dog'\n  - $ref: '#/components/schemas/Lizard'\n  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'\n  discriminator:\n    propertyName: petType\n    mapping:\n      dog: '#/components/schemas/Dog'\n      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'\n\n\nHere the discriminator value of dog will map to the schema #/components/schemas/Dog, rather than the default (implicit) value of Dog. If the discriminator value does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.\n\nWhen used in conjunction with the anyOf construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.\n\nIn both the oneOf and anyOf use cases, all possible schemas MUST be listed explicitly. To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an allOf construct may be used as an alternate schema.\n\nFor example:\n\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n      - petType\n      properties:\n        petType:\n          type: string\n      discriminator:\n        propertyName: petType\n        mapping:\n          dog: Dog\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Cat`\n        properties:\n          name:\n            type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Dog`\n        properties:\n          bark:\n            type: string\n    Lizard:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - type: object\n        # all other properties specific to a `Lizard`\n        properties:\n          lovesRocks:\n            type: boolean\n\n\na payload like this:\n\n{\n  \"petType\": \"Cat\",\n  \"name\": \"misty\"\n}\n\n\nwill indicate that the Cat schema be used. Likewise this schema:\n\n{\n  \"petType\": \"dog\",\n  \"bark\": \"soft\"\n}\n\n\nwill map to Dog because of the definition in the mapping element.\n\n4.8.26 XML Object\n\nA metadata object that allows for more fine-tuned XML model definitions.\n\nWhen using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information. See examples for expected behavior.\n\n4.8.26.1 Fixed Fields\nField Name\tType\tDescription\nname\tstring\tReplaces the name of the element/attribute used for the described schema property. When defined within items, it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true. If wrapped is false, it will be ignored.\nnamespace\tstring\tThe URI of the namespace definition. This MUST be in the form of an absolute URI.\nprefix\tstring\tThe prefix to be used for the name.\nattribute\tboolean\tDeclares whether the property definition translates to an attribute instead of an element. Default value is false.\nwrapped\tboolean\tMAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books>) or unwrapped (<book/><book/>). Default value is false. The definition takes effect only when defined alongside type being array (outside the items).\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.26.2 XML Object Examples\n\nThe examples of the XML object definitions are included inside a property definition of a Schema Object with a sample of the XML representation of it.\n\n4.8.26.2.1 No XML Element\n\nBasic string property:\n\n{\n    \"animals\": {\n        \"type\": \"string\"\n    }\n}\n\nanimals:\n  type: string\n\n<animals>...</animals>\n\n\nBasic string array property (wrapped is false by default):\n\n{\n    \"animals\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n\n<animals>...</animals>\n<animals>...</animals>\n<animals>...</animals>\n\n4.8.26.2.2 XML Name Replacement\n{\n  \"animals\": {\n    \"type\": \"string\",\n    \"xml\": {\n      \"name\": \"animal\"\n    }\n  }\n}\n\nanimals:\n  type: string\n  xml:\n    name: animal\n\n<animal>...</animal>\n\n4.8.26.2.3 XML Attribute, Prefix and Namespace\n\nIn this example, a full model definition is shown.\n\n{\n  \"Person\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\",\n        \"xml\": {\n          \"attribute\": true\n        }\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"xml\": {\n          \"namespace\": \"https://example.com/schema/sample\",\n          \"prefix\": \"sample\"\n        }\n      }\n    }\n  }\n}\n\nPerson:\n  type: object\n  properties:\n    id:\n      type: integer\n      format: int32\n      xml:\n        attribute: true\n    name:\n      type: string\n      xml:\n        namespace: https://example.com/schema/sample\n        prefix: sample\n\n<Person id=\"123\">\n    <sample:name xmlns:sample=\"https://example.com/schema/sample\">example</sample:name>\n</Person>\n\n4.8.26.2.4 XML Arrays\n\nChanging the element names:\n\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n\n<animal>value</animal>\n<animal>value</animal>\n\n\nThe external name property has no effect on the XML:\n\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\"\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n\n<animal>value</animal>\n<animal>value</animal>\n\n\nEven when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:\n\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    wrapped: true\n\n<animals>\n  <animals>value</animals>\n  <animals>value</animals>\n</animals>\n\n\nTo overcome the naming problem in the example above, the following definition can be used:\n\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    wrapped: true\n\n<animals>\n  <animal>value</animal>\n  <animal>value</animal>\n</animals>\n\n\nAffecting both internal and external names:\n\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\",\n      \"xml\": {\n        \"name\": \"animal\"\n      }\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n    xml:\n      name: animal\n  xml:\n    name: aliens\n    wrapped: true\n\n<aliens>\n  <animal>value</animal>\n  <animal>value</animal>\n</aliens>\n\n\nIf we change the external element but not the internal ones:\n\n{\n  \"animals\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"type\": \"string\"\n    },\n    \"xml\": {\n      \"name\": \"aliens\",\n      \"wrapped\": true\n    }\n  }\n}\n\nanimals:\n  type: array\n  items:\n    type: string\n  xml:\n    name: aliens\n    wrapped: true\n\n<aliens>\n  <aliens>value</aliens>\n  <aliens>value</aliens>\n</aliens>\n\n4.8.27 Security Scheme Object\n\nDefines a security scheme that can be used by the operations.\n\nSupported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2‚Äôs common flows (implicit, password, client credentials and authorization code) as defined in [RFC6749], and OpenID Connect Discovery. Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.\n\n4.8.27.1 Fixed Fields\nField Name\tType\tApplies To\tDescription\ntype\tstring\tAny\tREQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\".\ndescription\tstring\tAny\tA description for security scheme. [CommonMark] syntax MAY be used for rich text representation.\nname\tstring\tapiKey\tREQUIRED. The name of the header, query or cookie parameter to be used.\nin\tstring\tapiKey\tREQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\".\nscheme\tstring\thttp\tREQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235] Section 5.1. The values used SHOULD be registered in the IANA Authentication Scheme registry.\nbearerFormat\tstring\thttp (\"bearer\")\tA hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.\nflows\tOAuth Flows Object\toauth2\tREQUIRED. An object containing configuration information for the flow types supported.\nopenIdConnectUrl\tstring\topenIdConnect\tREQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.27.2 Security Scheme Object Example\n4.8.27.2.1 Basic Authentication Sample\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n\ntype: http\nscheme: basic\n\n4.8.27.2.2 API Key Sample\n{\n  \"type\": \"apiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n\ntype: apiKey\nname: api_key\nin: header\n\n4.8.27.2.3 JWT Bearer Sample\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\",\n}\n\ntype: http\nscheme: bearer\nbearerFormat: JWT\n\n4.8.27.2.4 Implicit OAuth2 Sample\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n\n4.8.28 OAuth Flows Object\n\nAllows configuration of the supported OAuth Flows.\n\n4.8.28.1 Fixed Fields\nField Name\tType\tDescription\nimplicit\tOAuth Flow Object\tConfiguration for the OAuth Implicit flow\npassword\tOAuth Flow Object\tConfiguration for the OAuth Resource Owner Password flow\nclientCredentials\tOAuth Flow Object\tConfiguration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.\nauthorizationCode\tOAuth Flow Object\tConfiguration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.29 OAuth Flow Object\n\nConfiguration details for a supported OAuth Flow\n\n4.8.29.1 Fixed Fields\nField Name\tType\tApplies To\tDescription\nauthorizationUrl\tstring\toauth2 (\"implicit\", \"authorizationCode\")\tREQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\ntokenUrl\tstring\toauth2 (\"password\", \"clientCredentials\", \"authorizationCode\")\tREQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\nrefreshUrl\tstring\toauth2\tThe URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.\nscopes\tMap[string, string]\toauth2\tREQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.\n\nThis object MAY be extended with Specification Extensions.\n\n4.8.29.2 OAuth Flow Object Examples\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    },\n    \"authorizationCode\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"tokenUrl\": \"https://example.com/api/oauth/token\",\n      \"scopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  }\n}\n\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n  authorizationCode:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    tokenUrl: https://example.com/api/oauth/token\n    scopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\n\n4.8.30 Security Requirement Object\n\nLists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.\n\nSecurity Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.\n\nWhen a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.\n\n4.8.30.1 Patterned Fields\nField Pattern\tType\tDescription\n{name}\t[string]\tEach name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type \"oauth2\" or \"openIdConnect\", then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MAY contain a list of role names which are required for the execution, but are not otherwise defined or exchanged in-band.\n4.8.30.2 Security Requirement Object Examples\n4.8.30.2.1 Non-OAuth2 Security Requirement\n{\n  \"api_key\": []\n}\n\napi_key: []\n\n4.8.30.2.2 OAuth2 Security Requirement\n{\n  \"petstore_auth\": [\n    \"write:pets\",\n    \"read:pets\"\n  ]\n}\n\npetstore_auth:\n- write:pets\n- read:pets\n\n4.8.30.2.3 Optional OAuth2 Security\n\nOptional OAuth2 security as would be defined in an OpenAPI Object or an Operation Object:\n\n{\n  \"security\": [\n    {},\n    {\n      \"petstore_auth\": [\n        \"write:pets\",\n        \"read:pets\"\n      ]\n    }\n  ]\n}\n\nsecurity:\n  - {}\n  - petstore_auth:\n    - write:pets\n    - read:pets\n\n4.9 Specification Extensions\n\nWhile the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.\n\nThe extensions properties are implemented as patterned fields that are always prefixed by \"x-\".\n\nField Pattern\tType\tDescription\n^x-\tAny\tAllows extensions to the OpenAPI Schema. The field name MUST begin with x-, for example, x-internal-id. Field names beginning x-oai- and x-oas- are reserved for uses defined by the OpenAPI Initiative. The value can be null, a primitive, an array or an object.\n\nThe extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).\n\n4.10 Security Filtering\n\nSome objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation.\n\nThe reasoning is to allow an additional layer of access control over the documentation. While not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.\n\nTwo examples of this:\n\nThe Paths Object MAY be present but empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can‚Äôt access any documentation. They would still have access to at least the Info Object which may contain additional information regarding authentication.\nThe Path Item Object MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different from hiding the path itself from the Paths Object, because the user will be aware of its existence. This allows the documentation provider to finely control what the viewer can see.\nA. Appendix A: Revision History\nVersion\tDate\tNotes\n3.1.0\t2021-02-15\tRelease of the OpenAPI Specification 3.1.0\n3.1.0-rc1\t2020-10-08\trc1 of the 3.1 specification\n3.1.0-rc0\t2020-06-18\trc0 of the 3.1 specification\n3.0.3\t2020-02-20\tPatch release of the OpenAPI Specification 3.0.3\n3.0.2\t2018-10-08\tPatch release of the OpenAPI Specification 3.0.2\n3.0.1\t2017-12-06\tPatch release of the OpenAPI Specification 3.0.1\n3.0.0\t2017-07-26\tRelease of the OpenAPI Specification 3.0.0\n3.0.0-rc2\t2017-06-16\trc2 of the 3.0 specification\n3.0.0-rc1\t2017-04-27\trc1 of the 3.0 specification\n3.0.0-rc0\t2017-02-28\tImplementer‚Äôs Draft of the 3.0 specification\n2.0\t2015-12-31\tDonation of Swagger 2.0 to the OpenAPI Initiative\n2.0\t2014-09-08\tRelease of Swagger 2.0\n1.2\t2014-03-14\tInitial release of the formal document.\n1.1\t2012-08-22\tRelease of Swagger 1.1\n1.0\t2011-08-10\tFirst release of the Swagger Specification\nB. References\nB.1 Normative references\n[ABNF]\nAugmented BNF for Syntax Specifications: ABNF. D. Crocker, Ed.; P. Overell. IETF. January 2008. Internet Standard. URL: https://www.rfc-editor.org/rfc/rfc5234\n[CommonMark]\nCommonMark Spec. URL: https://spec.commonmark.org/\n[CommonMark-0.27]\nCommonMark Spec, Version 0.27. John MacFarlane. 18 November 2016. URL: https://spec.commonmark.org/0.27/\n[IANA-HTTP-AUTHSCHEMES]\nHypertext Transfer Protocol (HTTP) Authentication Scheme Registry. IANA. URL: https://www.iana.org/assignments/http-authschemes/\n[IANA-HTTP-STATUS-CODES]\nHypertext Transfer Protocol (HTTP) Status Code Registry. IANA. URL: https://www.iana.org/assignments/http-status-codes/\n[JSON-Schema-2020-12]\nJSON Schema: A Media Type for Describing JSON Documents. Draft 2020-12. Austin Wright; Henry Andrews; Ben Hutton; Greg Dennis. Internet Engineering Task Force (IETF). 8 December 2020. Internet-Draft. URL: https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00\n[JSON-Schema-Validation-2020-12]\nJSON Schema Validation: A Vocabulary for Structural Validation of JSON. Draft 2020-12. Austin Wright; Henry Andrews; Ben Hutton. Internet Engineering Task Force (IETF). 8 December 2020. Internet-Draft. URL: https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-validation-00\n[RFC1866]\nHypertext Markup Language - 2.0. T. Berners-Lee; D. Connolly. IETF. November 1995. Historic. URL: https://www.rfc-editor.org/rfc/rfc1866\n[RFC2045]\nMultipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies. N. Freed; N. Borenstein. IETF. November 1996. Draft Standard. URL: https://www.rfc-editor.org/rfc/rfc2045\n[RFC2119]\nKey words for use in RFCs to Indicate Requirement Levels. S. Bradner. IETF. March 1997. Best Current Practice. URL: https://www.rfc-editor.org/rfc/rfc2119\n[RFC3986]\nUniform Resource Identifier (URI): Generic Syntax. T. Berners-Lee; R. Fielding; L. Masinter. IETF. January 2005. Internet Standard. URL: https://www.rfc-editor.org/rfc/rfc3986\n[RFC4648]\nThe Base16, Base32, and Base64 Data Encodings. S. Josefsson. IETF. October 2006. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc4648\n[RFC6570]\nURI Template. J. Gregorio; R. Fielding; M. Hadley; M. Nottingham; D. Orchard. IETF. March 2012. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc6570\n[RFC6749]\nThe OAuth 2.0 Authorization Framework. D. Hardt, Ed.. IETF. October 2012. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc6749\n[RFC6838]\nMedia Type Specifications and Registration Procedures. N. Freed; J. Klensin; T. Hansen. IETF. January 2013. Best Current Practice. URL: https://www.rfc-editor.org/rfc/rfc6838\n[RFC6901]\nJavaScript Object Notation (JSON) Pointer. P. Bryan, Ed.; K. Zyp; M. Nottingham, Ed.. IETF. April 2013. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc6901\n[RFC7159]\nThe JavaScript Object Notation (JSON) Data Interchange Format. T. Bray, Ed.. IETF. March 2014. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc7159\n[RFC7230]\nHypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://httpwg.org/specs/rfc7230.html\n[RFC7231]\nHypertext Transfer Protocol (HTTP/1.1): Semantics and Content. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://httpwg.org/specs/rfc7231.html\n[RFC7235]\nHypertext Transfer Protocol (HTTP/1.1): Authentication. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://httpwg.org/specs/rfc7235.html\n[RFC7578]\nReturning Values from Forms: multipart/form-data. L. Masinter. IETF. July 2015. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc7578\n[RFC8174]\nAmbiguity of Uppercase vs Lowercase in RFC 2119 Key Words. B. Leiba. IETF. May 2017. Best Current Practice. URL: https://www.rfc-editor.org/rfc/rfc8174\n[SPDX-Licenses]\nSPDX License List. Linux Foundation. URL: https://spdx.org/licenses/\n[YAML]\nYAML Ain‚Äôt Markup Language (YAML‚Ñ¢) Version 1.2. Oren Ben-Kiki; Clark Evans; Ingy d√∂t Net. 1 October 2009. URL: http://yaml.org/spec/1.2/spec.html\n\n‚Üë\n\nEnd of content from https://spec.openapis.org/oas/v3.1.0.html"
    ]
  ],
  "selectionOrder": [
    "page:1732202654324"
  ]
}